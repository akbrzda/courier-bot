// grafik.js

const { google } = require("googleapis");
const moment = require("moment-timezone");
const winston = require("winston");

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
const logger = winston.createLogger({ level: "info", transports: [new winston.transports.Console()] });

// –ë–∞–∑–∞ –∫—É—Ä—å–µ—Ä–æ–≤: –∫–ª—é—á ‚Äî chatId, –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî { name, status }
const couriers = require("./users.json");

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets API
const auth = new google.auth.GoogleAuth({ keyFile: "creds.json", scopes: ["https://www.googleapis.com/auth/spreadsheets"] });
const sheets = google.sheets({ version: "v4", auth });

// –ö–∞—Ä—Ç–∞ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
const DAY_MAP_SHORT = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"];

function isScheduleSubmissionAllowed() {
  const now = moment().tz("Asia/Yekaterinburg");
  const day = now.isoWeekday(); // 1=–ü–Ω ... 7=–í—Å
  const time = now.format("HH:mm");
  logger.info(`[–û–∫–Ω–æ –ø—Ä–∏—ë–º–∞] –î–µ–Ω—å: ${day}, –í—Ä–µ–º—è: ${time}`);
  if (
    // –ß–µ—Ç–≤–µ—Ä–≥ —Å 22:00 –¥–æ 23:59
    (day === 4 && time >= "22:00") ||
    // –ü—è—Ç–Ω–∏—Ü–∞ (–≤–µ—Å—å –¥–µ–Ω—å)
    day === 5 ||
    // –°—É–±–±–æ—Ç–∞ (–≤–µ—Å—å –¥–µ–Ω—å)
    day === 6 ||
    // –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –¥–æ 12:00
    (day === 7 && time < "12:00")
  ) {
    logger.info("–†–∞–∑—Ä–µ—à–µ–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≥—Ä–∞—Ñ–∏–∫.");
    return true;
  }
  logger.info("–ó–∞–ø—Ä–µ—Ç –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –≥—Ä–∞—Ñ–∏–∫–∞!");
  return false;
}

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç –≥—Ä–∞–Ω–∏—Ü—ã –Ω–µ–¥–µ–ª–∏ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ ‚Äì –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ).
 * @param {boolean} nextWeek ‚Äî true –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–∏, false –¥–ª—è —Ç–µ–∫—É—â–µ–π.
 */
function getWeekBounds(nextWeek = false) {
  const now = moment().tz("asia/yekaterinburg");
  const mon = now
    .clone()
    .startOf("isoWeek")
    .add(nextWeek ? 1 : 0, "weeks");
  const sun = mon.clone().add(6, "days");
  logger.info(`Week bounds nextWeek=${nextWeek} from=${mon.format()} to=${sun.format()}`);
  return { from: mon, to: sun };
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ª–∏—Å—Ç–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º.
 */
async function sheetExists(spreadsheetId, title) {
  const meta = await sheets.spreadsheets.get({ spreadsheetId });
  return meta.data.sheets.some((sh) => sh.properties.title === title);
}

/**
 * –î—É–±–ª–∏—Ä—É–µ—Ç –ª–∏—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –∏ –æ—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫ –Ω–∏–∂–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤,
 * –∞ —Ç–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç —à–∞–ø–∫—É —Å –¥–∞—Ç–∞–º–∏ –∏ –¥–Ω—è–º–∏ –Ω–µ–¥–µ–ª–∏.
 */
async function duplicateWeekSheet(spreadsheetId, sourceTitle, newTitle, from, to) {
  const meta = await sheets.spreadsheets.get({ spreadsheetId });
  const sourceSheet = meta.data.sheets.find((sh) => sh.properties.title === sourceTitle);
  if (!sourceSheet) throw new Error(`Source sheet ${sourceTitle} not found`);

  // –ö–æ–ø–∏—Ä—É–µ–º –ª–∏—Å—Ç
  await sheets.spreadsheets.batchUpdate({
    spreadsheetId,
    resource: { requests: [{ duplicateSheet: { sourceSheetId: sourceSheet.properties.sheetId, newSheetName: newTitle } }] },
  });

  // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å 4-–π —Å—Ç—Ä–æ–∫–∏ (A4:Z)
  await sheets.spreadsheets.values.clear({ spreadsheetId, range: `'${newTitle}'!A4:Z` });

  // –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —à–∞–ø–∫–∏ (A1:I2)
  const dates = [];
  const days = [];
  for (let i = 0; i < 7; i++) {
    const d = from.clone().add(i, "days");
    dates.push(d.format("DD.MM"));
    days.push(DAY_MAP_SHORT[i].toLowerCase());
  }
  const values = [
    ["‚Ññ –ø/–ø", "–§–ò–û", ...dates],
    ["", "", ...days],
  ];

  // –û–±–Ω–æ–≤–ª—è–µ–º —à–∞–ø–∫—É –Ω–æ–≤—ã–º–∏ –¥–∞—Ç–∞–º–∏
  await sheets.spreadsheets.values.update({
    spreadsheetId,
    range: `'${newTitle}'!A1:I2`,
    valueInputOption: "USER_ENTERED",
    resource: { values },
  });
}

/**
 * –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π –ª–∏—Å—Ç –∏ –∑–∞–ø–æ–ª–Ω—è–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–∞—Ç –∏ –¥–Ω–µ–π.
 */
async function createWeekSheet(spreadsheetId, { from, to }) {
  const title = `${from.format("DD.MM")}-${to.format("DD.MM")}`;
  await sheets.spreadsheets.batchUpdate({
    spreadsheetId,
    resource: { requests: [{ addSheet: { properties: { title, gridProperties: { rowCount: 30, columnCount: 10 } } } }] },
  });
  const dates = [];
  const days = [];
  for (let i = 0; i < 7; i++) {
    const d = from.clone().add(i, "days");
    dates.push(d.format("DD.MM"));
    days.push(DAY_MAP_SHORT[i].toLowerCase());
  }
  const values = [
    ["‚Ññ –ø/–ø", "–§–ò–û", ...dates],
    ["", "", ...days],
  ];
  await sheets.spreadsheets.values.update({
    spreadsheetId,
    range: `'${title}'!A1:I2`,
    valueInputOption: "USER_ENTERED",
    resource: { values },
  });
  return title;
}

/**
 * –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫—É—Ä—å–µ—Ä–∞ –∏ –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç –ø—Ä–∏—Å–ª–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫,
 * —Å–æ–∑–¥–∞–≤–∞—è –ª–∏—Å—Ç –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
 */
async function ensureWeekSheetAndAsk(spreadsheetId, chatId, telegram, withPrompt = true) {
  /*   if (!isScheduleSubmissionAllowed()) {
    await telegram.sendMessage(chatId, "–ì—Ä–∞—Ñ–∏–∫ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å 22:00 —á–µ—Ç–≤–µ—Ä–≥–∞ –∏ –¥–æ 12:00 –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è.");
    return;
  } */
  const { from, to } = getWeekBounds(true);
  const sheetName = `${from.format("DD.MM")}-${to.format("DD.MM")}`;
  const prev = getWeekBounds(false);
  const prevTitle = `${prev.from.format("DD.MM")}-${prev.to.format("DD.MM")}`;
  if (!(await sheetExists(spreadsheetId, sheetName))) {
    if (await sheetExists(spreadsheetId, prevTitle)) {
      await duplicateWeekSheet(spreadsheetId, prevTitle, sheetName, from, to);
    } else {
      await createWeekSheet(spreadsheetId, { from, to });
    }
  }
  if (withPrompt) {
    const prompt = `üìÖ –ü—Ä–∏—à–ª–∏—Ç–µ –≤–∞—à –≥—Ä–∞—Ñ–∏–∫ –Ω–∞ –ø–µ—Ä–∏–æ–¥ *${from.format("DD.MM")}‚Äì${to.format("DD.MM")}* –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n–ü–Ω: 10-23\n–í—Ç: 10-23\n‚Ä¶`;
    await telegram.sendMessage(chatId, prompt, { parse_mode: "Markdown" });
  }
  return sheetName;
}

/**
 * –ü–∞—Ä—Å–∏—Ç —Ç–µ–∫—Å—Ç —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –∫—É—Ä—å–µ—Ä–∞.
 */
function parseSchedule(text) {
  const lines = text
    .split("\n")
    .map((l) => l.trim())
    .filter(Boolean);
  const hours = Array(7).fill("–≤—ã—Ö");
  for (const line of lines) {
    const [dayPart, time] = line.split(":").map((p) => p.trim());
    const idx = DAY_MAP_SHORT.indexOf(dayPart);
    if (idx === -1) throw new Error(`–ù–µ–ø–æ–Ω—è—Ç–Ω—ã–π –¥–µ–Ω—å: ${dayPart}`);
    hours[idx] = time;
  }
  return hours;
}

/**
 * –ß–∏—Ç–∞–µ—Ç –§–ò–û –∏–∑ –±–∞–∑—ã –ø–æ chatId –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç—Ä–æ–∫—É —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º.
 * –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –¥—É–±–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–æ–ª–±—Ü–∞ B.
 */
async function parseAndAppend(spreadsheetId, sheetName, text, chatId) {
  const courier = couriers[String(chatId)];
  if (!courier || courier.status !== "approved") {
    throw new Error("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –≥—Ä–∞—Ñ–∏–∫–∞.");
  }
  const fio = courier.name;
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ: —á–∏—Ç–∞–µ–º —Å—Ç–æ–ª–±–µ—Ü B –Ω–∞—á–∏–Ω–∞—è —Å 3-–π —Å—Ç—Ä–æ–∫–∏
  const existing = await sheets.spreadsheets.values.get({
    spreadsheetId,
    range: `'${sheetName}'!B4:B`,
  });
  const names = (existing.data.values || []).map((r) => r[0]);
  if (names.includes(fio)) {
    throw new Error("–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≥—Ä–∞—Ñ–∏–∫ –Ω–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥. –ß—Ç–æ–±—ã –µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥—Ä–∞—Ñ–∏–∫'.");
  }
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ü–ü (–ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä)
  const pp = names.length + 1;
  // –ü–∞—Ä—Å–∏–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
  const hours = parseSchedule(text);
  const row = [pp, fio, ...hours];
  await sheets.spreadsheets.values.append({
    spreadsheetId,
    range: `'${sheetName}'!A4:I`,
    valueInputOption: "USER_ENTERED",
    resource: { values: [row] },
  });
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –≤ —á–∞—Ç.
 */
async function showSchedule(spreadsheetId, chatId, telegram, nextWeek = false, isAdmin = false, fio = null) {
  const { from, to } = getWeekBounds(nextWeek);
  const sheetName = `${from.format("DD.MM")}-${to.format("DD.MM")}`;
  const res = await sheets.spreadsheets.values.get({ spreadsheetId, range: `'${sheetName}'!A4:I27` });
  const rows = res.data.values || [];

  let text = `üìã –ì—Ä–∞—Ñ–∏–∫ –Ω–∞ –ø–µ—Ä–∏–æ–¥ *${from.format("DD.MM")}‚Äì${to.format("DD.MM")}*:\n\n`;

  if (isAdmin) {
    if (!rows.length) {
      await telegram.sendMessage(chatId, "–ï—â—ë –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ –≥—Ä–∞—Ñ–∏–∫–µ.");
      return;
    }
    for (const r of rows) {
      if (!r[1]) continue;
      const times = r
        .slice(2, 9)
        .map((t, i) => `${DAY_MAP_SHORT[i]}: ${t}`)
        .join("\n");
      text += `*${r[1]}*\n${times}\n\n`;
    }
  } else {
    const myRow = rows.find((r) => r[1] === fio);
    if (!myRow) {
      await telegram.sendMessage(chatId, "–í–∞—à –≥—Ä–∞—Ñ–∏–∫ –Ω–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.");
      return;
    }
    text += myRow
      .slice(2, 9)
      .map((t, i) => `${DAY_MAP_SHORT[i]}: ${t}`)
      .join("\n");
  }
  await telegram.sendMessage(chatId, text, { parse_mode: "Markdown" });
}

async function upsertSchedule(spreadsheetId, sheetName, text, chatId, telegram) {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–∫–Ω–∞, –¥–æ—Å—Ç—É–ø–∞ –∏ —Ç.–¥. ‚Äî –∫–∞–∫ –≤ parseAndAppend

  const courier = couriers[String(chatId)];
  if (!courier || courier.status !== "approved") {
    await telegram.sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—é –≥—Ä–∞—Ñ–∏–∫–∞.");
    return;
  }
  const fio = courier.name;

  // –ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π
  const res = await sheets.spreadsheets.values.get({
    spreadsheetId,
    range: `'${sheetName}'!B4:B27`,
  });
  const rows = res.data.values || [];

  // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É —Å —ç—Ç–∏–º –§–ò–û
  let rowIdx = null;
  let names = [];
  for (let i = 0; i < rows.length; i++) {
    if (rows[i] && rows[i][0]) names.push(rows[i][0]);
    if (rows[i] && rows[i][0] === fio) rowIdx = 4 + i;
  }

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ü–ü (–ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä)
  let pp = null;
  if (rowIdx !== null) {
    // –ï—Å–ª–∏ –∫—É—Ä—å–µ—Ä —É–∂–µ –µ—Å—Ç—å ‚Äî –≤–∑—è—Ç—å —Å—Ç–∞—Ä—ã–π –ü–ü
    const ppRes = await sheets.spreadsheets.values.get({
      spreadsheetId,
      range: `'${sheetName}'!A${rowIdx}:A${rowIdx}`,
    });
    pp = (ppRes.data.values && ppRes.data.values[0] && ppRes.data.values[0][0]) || names.length; // –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –ø—É—Å—Ç–æ, –≤–∑—è—Ç—å –¥–ª–∏–Ω—É names
  } else {
    // –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –≤ –ø–µ—Ä–≤—É—é –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
    for (let i = 0; i < 24; i++) {
      if (!rows[i] || !rows[i][0]) {
        rowIdx = 4 + i;
        break;
      }
    }
    if (rowIdx === null) {
      await telegram.sendMessage(chatId, "–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞!");
      return;
    }
    pp = names.length + 1;
  }

  // –ü–∞—Ä—Å–∏–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
  const hours = parseSchedule(text);
  const row = [pp, fio, ...hours];
  await sheets.spreadsheets.values.update({
    spreadsheetId,
    range: `'${sheetName}'!A${rowIdx}:I${rowIdx}`,
    valueInputOption: "USER_ENTERED",
    resource: { values: [row] },
  });
}

module.exports = { ensureWeekSheetAndAsk, parseAndAppend, showSchedule, upsertSchedule };
