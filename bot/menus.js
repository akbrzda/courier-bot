const { Markup } = require("telegraf");
const { BRANCHES, ROLES } = require("../config");
const { canAccessReports, hasBranchManagerRights, getUserRole } = require("./context");

function buildBranchKeyboard(prefix) {
  return Markup.inlineKeyboard(BRANCHES.map((branch) => [Markup.button.callback(branch.label, `${prefix}_${branch.id}`)]));
}

function getMainMenuInline(user = null) {
  const buttons = [];
  if (canAccessReports(user)) {
    buttons.push([Markup.button.callback("üìÖ –¢–∞–±–µ–ª—å", "menu:report")]);
  }
  buttons.push([Markup.button.callback("üìä –ì—Ä–∞—Ñ–∏–∫", "menu:schedule")]);
  buttons.push([Markup.button.callback("üîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏", "menu:links")]);
  buttons.push([Markup.button.callback("üìö –û–±—É—á–µ–Ω–∏–µ", "menu:training")]);
  buttons.push([Markup.button.callback("‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É", "support:start")]);
  return Markup.inlineKeyboard(buttons);
}

function getReportMenuInline() {
  return Markup.inlineKeyboard([
    [Markup.button.callback("üìÖ –ó–∞ —Å–µ–≥–æ–¥–Ω—è", "report:today")],
    [Markup.button.callback("üìÜ –ó–∞ –≤—á–µ—Ä–∞", "report:yesterday")],
    [Markup.button.callback("üìä –¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è", "report:week_current")],
    [Markup.button.callback("üìä –ü—Ä–æ—à–ª–∞—è –Ω–µ–¥–µ–ª—è", "report:week_prev")],
    [Markup.button.callback("üóì –≠—Ç–æ—Ç –º–µ—Å—è—Ü", "report:month_current")],
    [Markup.button.callback("üóì –ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü", "report:month_prev")],
    [Markup.button.callback("üìÖ –í—ã–±—Ä–∞—Ç—å –ø–µ—Ä–∏–æ–¥‚Ä¶", "report:custom")],
    [Markup.button.callback("‚óÄÔ∏è –ù–∞–∑–∞–¥", "menu:main")],
  ]);
}

function getScheduleMenuInline(user = null) {
  const role = getUserRole(user);
  const buttons = [];

  if (role !== ROLES.LOGIST) {
    buttons.push([Markup.button.callback("üëÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥—Ä–∞—Ñ–∏–∫", "schedule:view")]);
    buttons.push([Markup.button.callback("‚ûï –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫", "schedule:send")]);
  }
  if (hasBranchManagerRights(user) && (getUserRole(user) !== ROLES.ADMIN || user?.branch)) {
    buttons.push([Markup.button.callback("üìä –ì—Ä–∞—Ñ–∏–∫ —Ñ–∏–ª–∏–∞–ª–∞", "schedule:branch")]);
  }
  if (!buttons.length) {
    buttons.push([Markup.button.callback("üìä –ì—Ä–∞—Ñ–∏–∫", "schedule:view")]);
  }
  buttons.push([Markup.button.callback("‚óÄÔ∏è –ù–∞–∑–∞–¥", "menu:main")]);
  return Markup.inlineKeyboard(buttons);
}

function getBackInlineMenu(callbackBack) {
  return Markup.inlineKeyboard([[Markup.button.callback("‚óÄÔ∏è –ù–∞–∑–∞–¥", callbackBack)]]);
}

function adminMenu() {
  return Markup.keyboard([
    ["üë• –°–ø–∏—Å–æ–∫ –∫—É—Ä—å–µ—Ä–æ–≤", "‚ùå –£–¥–∞–ª–∏—Ç—å –∫—É—Ä—å–µ—Ä–∞"],
    ["üìã –ì—Ä–∞—Ñ–∏–∫: —Ç–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è", "üìã –ì—Ä–∞—Ñ–∏–∫: —Å–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è"],
    ["‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –§–ò–û –∫—É—Ä—å–µ—Ä–∞", "üì¢ –†–∞—Å—Å—ã–ª–∫–∞"],
    ["üîó –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∞–º–∏", "üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏–µ–º"],
    ["üéØ –ù–∞–∑–Ω–∞—á–∏—Ç—å —Ä–æ–ª—å"],
  ]).resize();
}

function createPaginatedKeyboard(items, page, itemsPerPage, callbackPrefix, isAdmin = false) {
  const start = page * itemsPerPage;
  const end = start + itemsPerPage;
  const pageItems = items.slice(start, end);
  const totalPages = Math.ceil(items.length / itemsPerPage);

  const keyboard = [];

  if (isAdmin) {
    keyboard.push([Markup.button.callback("‚ûï –î–æ–±–∞–≤–∏—Ç—å", `${callbackPrefix}:add`), Markup.button.callback("‚ùå –£–¥–∞–ª–∏—Ç—å", `${callbackPrefix}:delete`)]);
  }

  pageItems.forEach((item) => {
    if (callbackPrefix === "links") {
      keyboard.push([Markup.button.callback(item.title, `links:view_${item.id}`)]);
    } else {
      keyboard.push([Markup.button.callback(item.title, `training:view_${item.id}`)]);
    }
  });

  if (totalPages > 1) {
    const paginationButtons = [];
    if (page > 0) {
      paginationButtons.push(Markup.button.callback("‚¨ÖÔ∏è", `${callbackPrefix}:page_${page - 1}`));
    }
    paginationButtons.push(Markup.button.callback(`${page + 1}/${totalPages}`, `${callbackPrefix}:noop`));
    if (page < totalPages - 1) {
      paginationButtons.push(Markup.button.callback("‚û°Ô∏è", `${callbackPrefix}:page_${page + 1}`));
    }
    keyboard.push(paginationButtons);
  }

  if (!isAdmin) {
    keyboard.push([Markup.button.callback("‚óÄÔ∏è –ù–∞–∑–∞–¥", "menu:main")]);
  }

  return Markup.inlineKeyboard(keyboard);
}

module.exports = {
  buildBranchKeyboard,
  getMainMenuInline,
  getReportMenuInline,
  getScheduleMenuInline,
  getBackInlineMenu,
  adminMenu,
  createPaginatedKeyboard,
};
