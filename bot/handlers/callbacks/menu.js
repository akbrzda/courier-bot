const { Markup } = require("telegraf");
const { BRANCHES, ROLES, SPREADSHEET_ID, ADMIN_IDS } = require("../../../config");
const {
  ensureRoleState,
  getBranchLabel,
  getRoleLabel,
  getUserRole,
  canAccessReports,
  hasBranchManagerRights,
} = require("../../context");
const {
  getMainMenuInline,
  getReportMenuInline,
  getScheduleMenuInline,
  getBackInlineMenu,
} = require("../../menus");
const {
  logTabReport,
  logError,
  logScheduleAction,
  logAction,
} = require("../../../services/logger");
const {
  getUserById,
} = require("../../../services/users");
const {
  getScheduleText,
  getBranchScheduleText,
  getWeekBounds,
  isScheduleSubmissionAllowed,
} = require("../../../services/schedule");
const {
  setRequestEntry,
  clearRequestEntry,
  notifyRecipients,
} = require("../../utils/settingsNotifications");
const { sendReportText } = require("../../reporting");
const { SETTINGS_ALLOWED_ROLES } = require("./constants");
const { getManagersByBranch, displayUsername, dedupeUsers } = require("./shared");

async function handleMenuCallbacks({ bot, ctx, data, userId }) {
  const isMenuRelated =
    data.startsWith("menu:") ||
    data.startsWith("report:") ||
    data.startsWith("schedule:") ||
    data.startsWith("settings:") ||
    data.startsWith("support:");

  if (!isMenuRelated) {
    return false;
  }

  if (data === "support:start") {
    ctx.session = ctx.session || {};
    ctx.session.supportChatActive = true;
    await ctx.editMessageText(
      "–í—ã –≤–æ—à–ª–∏ –≤ —Ä–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n–ù–∞–∂–º–∏—Ç–µ ¬´–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥¬ª —á—Ç–æ–±—ã –≤—ã–π—Ç–∏.",
      Markup.inlineKeyboard([
        [Markup.button.callback("‚úñÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥", "support:stop")],
        [Markup.button.callback("‚óÄÔ∏è –ù–∞–∑–∞–¥", "menu:main")],
      ])
    );
    return true;
  }

  if (data === "support:stop") {
    ctx.session = ctx.session || {};
    ctx.session.supportChatActive = false;
    await ctx.answerCbQuery("–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω");
    try {
      await ctx.editMessageText("–î–∏–∞–ª–æ–≥ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∑–∞–≤–µ—Ä—à—ë–Ω.", getMainMenuInline(ctx.state.currentUser));
    } catch (_) {}
    return true;
  }

  if (data === "menu:main") {
    const user = await getUserById(userId);
    await ctx.editMessageText(
      `${user?.name || ""}, –í—ã —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –±–æ—Ç–∞.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
      getMainMenuInline(user)
    );
    return true;
  }

  if (data === "menu:report") {
    if (!canAccessReports(ctx.state.currentUser)) {
      await ctx.answerCbQuery("–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤–∞—à–µ–π —Ä–æ–ª–∏");
      return true;
    }
    await ctx.editMessageText(`–û—Ç—á–µ—Ç –ø–æ –≤–∞—à–µ–π –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç–µ.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`, getReportMenuInline());
    return true;
  }

  if (data.startsWith("report:")) {
    if (!canAccessReports(ctx.state.currentUser)) {
      await ctx.answerCbQuery("–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤–∞—à–µ–π —Ä–æ–ª–∏");
      return true;
    }
    const user = await getUserById(userId);
    const userInfo = {
      name: user?.name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
      username: user?.username,
      first_name: ctx.from.first_name,
      last_name: ctx.from.last_name,
    };

    await ctx.editMessageText("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Ç–∞–±–µ–ª—å...", getBackInlineMenu("menu:report"));
    let period = null;
    if (data === "report:today") period = "today";
    if (data === "report:yesterday") period = "yesterday";
    if (data === "report:week_current") period = "current_week";
    if (data === "report:week_prev") period = "last_week";
    if (data === "report:month_current") period = "current_month";
    if (data === "report:month_prev") period = "last_month";

    try {
      if (data === "report:custom") {
        await logTabReport(bot, userId, userInfo, "custom", { action: "–∑–∞–ø—Ä–æ—Å –≤–≤–æ–¥–∞ –ø–µ—Ä–∏–æ–¥–∞" });
        ctx.session = ctx.session || {};
        ctx.session.awaitingCustomReport = true;
        ctx.session.lastReportMsgId = ctx.callbackQuery.message.message_id;
        await ctx.editMessageText(
          "–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì-–î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01.07.2025-15.07.2025)",
          getBackInlineMenu("menu:report")
        );
      } else {
        await logTabReport(bot, userId, userInfo, period);
        const text = await sendReportText(userId, period);
        await ctx.editMessageText(text, { parse_mode: "HTML", ...getBackInlineMenu("menu:report") });
      }
    } catch (e) {
      await logError(bot, e, userId, userInfo, `–ó–∞–ø—Ä–æ—Å —Ç–∞–±–µ–ª—è –∑–∞ –ø–µ—Ä–∏–æ–¥: ${period}`);
      await ctx.editMessageText("‚ùó " + e.message, getBackInlineMenu("menu:report"));
    }
    return true;
  }

  if (data === "menu:schedule") {
    await ctx.editMessageText(`–ü—Ä–æ—Å–º–æ—Ç—Ä –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`, getScheduleMenuInline(ctx.state.currentUser));
    return true;
  }

  if (data === "schedule:branch") {
    await ensureRoleState(ctx);
    if (!hasBranchManagerRights(ctx.state.currentUser)) {
      await ctx.answerCbQuery("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤");
      return true;
    }
    const branchId = ctx.state.currentUser?.branch;
    const branchLabel = branchId ? getBranchLabel(branchId) : "–í–∞—à —Ñ–∏–ª–∏–∞–ª";
    await ctx.editMessageText(
      `–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Ñ–∏–ª–∏–∞–ª–∞ ${branchLabel}:`,
      Markup.inlineKeyboard([
        [Markup.button.callback("–¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è", "schedule:branch_current")],
        [Markup.button.callback("–°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è", "schedule:branch_next")],
        [Markup.button.callback("‚óÄÔ∏è –ù–∞–∑–∞–¥", "menu:schedule")],
      ])
    );
    return true;
  }

  if (data === "schedule:branch_current" || data === "schedule:branch_next") {
    await ensureRoleState(ctx);
    if (!hasBranchManagerRights(ctx.state.currentUser)) {
      await ctx.answerCbQuery("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤");
      return true;
    }
    const branchId = ctx.state.currentUser?.branch;
    const nextWeek = data.endsWith("next");
    const branchLabel = branchId ? getBranchLabel(branchId) : "–í–∞—à —Ñ–∏–ª–∏–∞–ª";
    await ctx.answerCbQuery();
    await ctx.editMessageText("‚è≥ –ü–æ–ª—É—á–∞—é –≥—Ä–∞—Ñ–∏–∫ —Ñ–∏–ª–∏–∞–ª–∞...", getBackInlineMenu("menu:schedule"));
    try {
      await logScheduleAction(
        bot,
        userId,
        {
          name:
            ctx.state.currentUser?.name ||
            (ctx.from.first_name && ctx.from.last_name
              ? `${ctx.from.first_name} ${ctx.from.last_name}`
              : ctx.from.first_name || ctx.from.username || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
          username: ctx.from.username,
        },
        `–ø—Ä–æ—Å–º–æ—Ç—Ä –≥—Ä–∞—Ñ–∏–∫–∞ —Ñ–∏–ª–∏–∞–ª–∞ ${branchLabel}`,
        { branchId, nextWeek }
      );
      const scheduleText = await getBranchScheduleText(SPREADSHEET_ID, branchId || "", branchLabel, nextWeek);
      await ctx.editMessageText(scheduleText, {
        parse_mode: "Markdown",
        ...getBackInlineMenu("menu:schedule"),
      });
    } catch (e) {
      await ctx.editMessageText("‚ùó " + e.message, getBackInlineMenu("menu:schedule"));
    }
    return true;
  }

  if (data === "menu:settings") {
    await ensureRoleState(ctx);
    const role = getUserRole(ctx.state.currentUser);
    if (!SETTINGS_ALLOWED_ROLES.has(role)) {
      await ctx.answerCbQuery("–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤–∞—à–µ–π —Ä–æ–ª–∏");
      return true;
    }
    await ctx.answerCbQuery();
    ctx.session = ctx.session || {};
    ctx.session.awaitingSettingsName = false;
    ctx.session.lastSettingsMessageId = null;
    await ctx.editMessageText(
      `‚öôÔ∏è –†–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫.\n\n–í–∞—à —Ç–µ–∫—É—â–∏–π —Ñ–∏–ª–∏–∞–ª: ${getBranchLabel(ctx.state.currentUser?.branch)}\n–í–∞—à–µ —Ç–µ–∫—É—â–µ–µ –§–ò–û: ${
        ctx.state.currentUser?.name
      }\n–í–∞—à–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å: ${getRoleLabel(getUserRole(ctx.state.currentUser))}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
      Markup.inlineKeyboard([
        [Markup.button.callback("üè¢ –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Å–º–µ–Ω—É —Ñ–∏–ª–∏–∞–ª–∞", "settings:change_branch")],
        [Markup.button.callback("‚úèÔ∏è –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Å–º–µ–Ω—É –§–ò–û", "settings:change_name")],
        [Markup.button.callback("‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É", "support:start")],
        [Markup.button.callback("‚óÄÔ∏è –ù–∞–∑–∞–¥", "menu:main")],
      ])
    );
    return true;
  }

  if (data === "settings:change_branch") {
    await ensureRoleState(ctx);
    const role = getUserRole(ctx.state.currentUser);
    if (!SETTINGS_ALLOWED_ROLES.has(role)) {
      await ctx.answerCbQuery("–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤–∞—à–µ–π —Ä–æ–ª–∏");
      return true;
    }
    await ctx.answerCbQuery();
    const keyboard = BRANCHES.map((branch) => [Markup.button.callback(branch.label, `settings:branch_${branch.id}`)]);
    keyboard.push([Markup.button.callback("‚óÄÔ∏è –ù–∞–∑–∞–¥", "menu:settings")]);
    await ctx.editMessageText("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–π—Ç–∏:", Markup.inlineKeyboard(keyboard));
    return true;
  }

  if (data === "settings:change_name") {
    await ensureRoleState(ctx);
    const role = getUserRole(ctx.state.currentUser);
    if (!SETTINGS_ALLOWED_ROLES.has(role)) {
      await ctx.answerCbQuery("–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤–∞—à–µ–π —Ä–æ–ª–∏");
      return true;
    }
    await ctx.answerCbQuery();
    ctx.session = ctx.session || {};
    ctx.session.awaitingSettingsName = true;
    ctx.session.lastSettingsMessageId = ctx.callbackQuery?.message?.message_id || null;
    await ctx.editMessageText("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –§–ò–û –ø–æ–ª–Ω–æ—Å—Ç—å—é (–ò–º—è –§–∞–º–∏–ª–∏—è).", getBackInlineMenu("menu:settings"));
    return true;
  }

  if (data.startsWith("settings:branch_")) {
    await ensureRoleState(ctx);
    const role = getUserRole(ctx.state.currentUser);
    if (!SETTINGS_ALLOWED_ROLES.has(role)) {
      await ctx.answerCbQuery("–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤–∞—à–µ–π —Ä–æ–ª–∏");
      return true;
    }
    const branchId = data.slice("settings:branch_".length);
    const branch = BRANCHES.find((b) => b.id === branchId);
    if (!branch) {
      await ctx.answerCbQuery("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∏–ª–∏–∞–ª");
      return true;
    }
    await ctx.answerCbQuery();
    ctx.session = ctx.session || {};
    ctx.session.awaitingSettingsName = false;
    const user = ctx.state?.currentUser || (await getUserById(userId));
    if (!user || user.status !== "approved") {
      await ctx.editMessageText("‚ùó –ó–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.", getBackInlineMenu("menu:settings"));
      return true;
    }
    if (user.branch === branch.id) {
      await ctx.editMessageText("–í—ã —É–∂–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω—ã –∑–∞ —ç—Ç–∏–º —Ñ–∏–ª–∏–∞–ª–æ–º.", getBackInlineMenu("menu:settings"));
      return true;
    }
    const userInfo = {
      name:
        user?.name ||
        (ctx.from.first_name && ctx.from.last_name
          ? `${ctx.from.first_name} ${ctx.from.last_name}`
          : ctx.from.first_name || ctx.from.username || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
      username: ctx.from.username,
      first_name: ctx.from.first_name,
      last_name: ctx.from.last_name,
    };
    const currentBranchLabel = getBranchLabel(user.branch);
    const usernameDisplay = displayUsername(user?.username || ctx.from.username);
    const notifyText =
      `‚öôÔ∏è –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–º–µ–Ω—É —Ñ–∏–ª–∏–∞–ª–∞\n\n` +
      `üë§ ${user?.name || userInfo.name} (${usernameDisplay})\n` +
      `–¢–µ–∫—É—â–∏–π —Ñ–∏–ª–∏–∞–ª: ${currentBranchLabel}\n` +
      `–ù–æ–≤—ã–π —Ñ–∏–ª–∏–∞–ª: ${branch.label}\n` +
      `üÜî Telegram ID: ${userId}`;

    const key = `branch:${userId}`;
    await clearRequestEntry(bot, key);
    setRequestEntry(key, {
      requesterId: userId,
      requesterName: user?.name || userInfo.name,
      requesterUsername: usernameDisplay,
      currentBranch: user.branch || null,
      currentBranchLabel,
      requestedBranch: branch.id,
      requestedBranchLabel: branch.label,
      requestedAt: Date.now(),
    });

    const approvalKeyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", `settings:branch:approve:${userId}:${branch.id}`),
        Markup.button.callback("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", `settings:branch:reject:${userId}:${branch.id}`),
      ],
    ]);

    const adminDelivered = await notifyRecipients(bot, key, ADMIN_IDS, notifyText, approvalKeyboard, {
      onError: async (err, chatId) => {
        await logError(bot, err, chatId, { name: "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" }, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—Ä–æ—Å–µ —Å–º–µ–Ω—ã —Ñ–∏–ª–∏–∞–ª–∞");
      },
    });

    let managerList = [];
    try {
      const targetManagers = await getManagersByBranch(branch.id);
      const currentManagers = user?.branch ? await getManagersByBranch(user.branch) : [];
      managerList = dedupeUsers([...targetManagers, ...currentManagers]).filter((mgr) => mgr?.id && String(mgr.id) !== userId);
    } catch (listErr) {
      await logError(bot, listErr, "system", {}, "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π –¥–ª—è —Å–º–µ–Ω—ã —Ñ–∏–ª–∏–∞–ª–∞");
    }

    const managerDelivered = await notifyRecipients(bot, key, managerList, notifyText, approvalKeyboard, {
      onError: async (err, chatId) => {
        await logError(bot, err, chatId, {}, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é –æ –∑–∞–ø—Ä–æ—Å–µ —Å–º–µ–Ω—ã —Ñ–∏–ª–∏–∞–ª–∞");
      },
    });

    const logPayload = {
      from: user.branch || null,
      to: branch.id,
    };
    if (adminDelivered.length) logPayload.notifiedAdmins = adminDelivered;
    if (managerDelivered.length) logPayload.notifiedManagers = managerDelivered;

    await logAction(bot, "–ó–∞–ø—Ä–æ—Å —Å–º–µ–Ω—ã —Ñ–∏–ª–∏–∞–ª–∞", userId, userInfo, logPayload, "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è");

    await ctx.editMessageText(
      "‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–º–µ–Ω—É —Ñ–∏–ª–∏–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
      getBackInlineMenu("menu:settings")
    );
    return true;
  }

  if (data === "schedule:view:current" || data === "schedule:view:next") {
    await ensureRoleState(ctx);
    if (getUserRole(ctx.state.currentUser) === ROLES.LOGIST) {
      await ctx.answerCbQuery("–î–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≥—Ä–∞—Ñ–∏–∫ —Ñ–∏–ª–∏–∞–ª–∞");
      return true;
    }
    const user = await getUserById(userId);
    const userInfo = {
      name: user?.name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
      username: user?.username,
      first_name: ctx.from.first_name,
      last_name: ctx.from.last_name,
    };
    const nextWeek = data.endsWith("next");

    await ctx.editMessageText("‚è≥ –ü–æ–ª—É—á–∞—é –≥—Ä–∞—Ñ–∏–∫...", getBackInlineMenu("menu:schedule"));
    try {
      await logScheduleAction(bot, userId, userInfo, `–ø—Ä–æ—Å–º–æ—Ç—Ä ${nextWeek ? "—Å–ª–µ–¥—É—é—â–µ–π" : "—Ç–µ–∫—É—â–µ–π"} –Ω–µ–¥–µ–ª–∏`);
      const grafText = await getScheduleText(SPREADSHEET_ID, userId, nextWeek);
      await ctx.editMessageText(grafText, { parse_mode: "Markdown", ...getBackInlineMenu("menu:schedule") });
    } catch (e) {
      await logError(bot, e, userId, userInfo, `–ü—Ä–æ—Å–º–æ—Ç—Ä –≥—Ä–∞—Ñ–∏–∫–∞ ${nextWeek ? "—Å–ª–µ–¥—É—é—â–µ–π" : "—Ç–µ–∫—É—â–µ–π"} –Ω–µ–¥–µ–ª–∏`);
      await ctx.editMessageText("‚ùó " + e.message, getBackInlineMenu("menu:schedule"));
    }
    return true;
  }

  if (data === "schedule:view") {
    await ensureRoleState(ctx);
    if (getUserRole(ctx.state.currentUser) === ROLES.LOGIST) {
      await ctx.answerCbQuery("–î–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≥—Ä–∞—Ñ–∏–∫ —Ñ–∏–ª–∏–∞–ª–∞");
      return true;
    }
    await ctx.editMessageText(
      "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é:",
      Markup.inlineKeyboard([
        [Markup.button.callback("–¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è", "schedule:view:current")],
        [Markup.button.callback("–°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è", "schedule:view:next")],
        [Markup.button.callback("‚óÄÔ∏è –ù–∞–∑–∞–¥", "menu:schedule")],
      ])
    );
    return true;
  }

  if (data === "schedule:send") {
    await ensureRoleState(ctx);
    if (getUserRole(ctx.state.currentUser) === ROLES.LOGIST) {
      await ctx.answerCbQuery("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤");
      return true;
    }
    const { from, to } = getWeekBounds(true);
    const user = await getUserById(userId);
    const userInfo = {
      name: user?.name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
      username: user?.username,
      first_name: ctx.from.first_name,
      last_name: ctx.from.last_name,
    };
    if (!isScheduleSubmissionAllowed()) {
      await logScheduleAction(bot, userId, userInfo, "–ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –≤–Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏");
      await ctx.editMessageText("–ì—Ä–∞—Ñ–∏–∫ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Å 22:00 —á–µ—Ç–≤–µ—Ä–≥–∞ –∏ –¥–æ 12:00 –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è.", getBackInlineMenu("menu:schedule"));
      return true;
    }
    await logScheduleAction(bot, userId, userInfo, "–∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –≥—Ä–∞—Ñ–∏–∫–∞", {
      period: `${from.format("DD.MM")}‚Äì${to.format("DD.MM")}`,
    });
    const warn = `üìÖ –ü—Ä–∏—à–ª–∏—Ç–µ –≤–∞—à –≥—Ä–∞—Ñ–∏–∫ –Ω–∞ –ø–µ—Ä–∏–æ–¥ ${from.format("DD.MM")}‚Äì${to.format("DD.MM")} –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n–ü–Ω: 10-23\n–í—Ç: 10-23\n‚Ä¶`;
    await ctx.editMessageText(warn, getBackInlineMenu("menu:schedule"));
    ctx.session.awaitingSchedule = true;
    ctx.session.scheduleMode = "send";
    ctx.session.scheduleNextWeek = true;
    ctx.session.lastInlineMsgId = ctx.callbackQuery.message.message_id;
    return true;
  }

  return false;
}

module.exports = {
  handleMenuCallbacks,
};
