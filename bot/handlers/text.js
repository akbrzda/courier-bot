const { Markup } = require("telegraf");
const { ADMIN_IDS, ROLES, SPREADSHEET_ID } = require("../../config");
const {
  getScheduleMenuInline,
  getReportMenuInline,
  getBackInlineMenu,
  getMainMenuInline,
  adminMenu,
} = require("../menus");
const {
  logTabReport,
  logError,
  logScheduleAction,
  logAction,
  logMessageSent,
} = require("../../services/logger");
const { getUserById } = require("../../services/users");
const {
  ensureWeekSheetAndAsk,
  parseAndAppend,
  upsertSchedule,
} = require("../../services/schedule");
const { sendReportText } = require("../reporting");

function registerTextHandlers(bot) {
  bot.on("text", async (ctx) => {
    ctx.session = ctx.session || {};
    const userId = ctx.from.id.toString();

    if (ctx.session.awaitingCustomReport) {
      ctx.session.awaitingCustomReport = false;
      const input = ctx.message.text.trim();
      const user = await getUserById(userId);
      const userInfo = {
        name: user?.name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
        username: user?.username,
        first_name: ctx.from.first_name,
        last_name: ctx.from.last_name,
      };

      try {
        await logTabReport(bot, userId, userInfo, "custom", { customPeriod: input });
        const text = await sendReportText(userId, "custom", input);
        const msgId = ctx.session.lastReportMsgId;
        if (msgId) {
          await ctx.telegram.editMessageText(
            ctx.chat.id,
            msgId,
            null,
            text,
            { parse_mode: "HTML", ...getBackInlineMenu("menu:report") }
          );
        } else {
          await ctx.reply(text, { parse_mode: "HTML", ...getReportMenuInline() });
        }
      } catch (e) {
        await logError(bot, e, userId, userInfo, `–ó–∞–ø—Ä–æ—Å –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ç–∞–±–µ–ª—è –∑–∞ –ø–µ—Ä–∏–æ–¥: ${input}`);
        const msgId = ctx.session.lastReportMsgId;
        if (msgId) {
          await ctx.telegram.editMessageText(
            ctx.chat.id,
            msgId,
            null,
            "‚ùó " + e.message,
            getBackInlineMenu("menu:report")
          );
        } else {
          await ctx.reply("‚ùó " + e.message, getReportMenuInline());
        }
      }
      return;
    }

    if (ctx.session.awaitingSupportMessage || ctx.session.supportChatActive) {
      const text = ctx.message.text?.trim();
      const user = await getUserById(userId);
      const userInfo = {
        name: user?.name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
        username: user?.username,
        first_name: ctx.from.first_name,
        last_name: ctx.from.last_name,
      };

      if (!text) {
        await logAction(bot, "–ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—É—Å—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", userId, userInfo);
        return ctx.reply("–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –û—Ç–º–µ–Ω–µ–Ω–æ.", getMainMenuInline(ctx.state?.currentUser));
      }

      try {
        await logMessageSent(bot, userId, userInfo, "—Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", {
          messageLength: text.length,
          supportChatActive: ctx.session.supportChatActive,
        });

        for (const admin of ADMIN_IDS) {
          try {
            await bot.telegram.sendMessage(
              admin,
              `üì• –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç –∫—É—Ä—å–µ—Ä–∞:\n` +
                `üë§ ${user ? user.name : userId} (ID: ${userId})\n\n` +
                `${text}`,
              Markup.inlineKeyboard([
                [Markup.button.callback(`‚úçÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å ${user ? user.name : userId}`, `support_reply:${userId}`)],
              ])
            );
          } catch (e) {
            console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É", admin, e.message);
            await logError(bot, e, userId, userInfo, "–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É");
          }
        }
        if (!ctx.session.supportChatActive) {
          await ctx.reply("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç.");
        }
      } catch (e) {
        await logError(bot, e, userId, userInfo, "–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É");
        await ctx.reply("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
      }
      return;
    }

    if (ctx.session.awaitingSchedule && ctx.session.scheduleMode === "send") {
      ctx.session.awaitingSchedule = false;
      const user = await getUserById(userId);
      const userInfo = {
        name: user?.name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
        username: user?.username,
        first_name: ctx.from.first_name,
        last_name: ctx.from.last_name,
      };

      try {
        await logScheduleAction(bot, userId, userInfo, "–æ—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞", {
          scheduleText:
            ctx.message.text.trim().substring(0, 100) +
            (ctx.message.text.trim().length > 100 ? "..." : ""),
        });

        ctx.session.currentSheet = await ensureWeekSheetAndAsk(
          SPREADSHEET_ID,
          ctx.chat.id,
          ctx.telegram,
          false,
          !!ctx.session.scheduleNextWeek
        );
        await parseAndAppend(SPREADSHEET_ID, ctx.session.currentSheet, ctx.message.text.trim(), userId);
        await ctx.telegram.editMessageText(
          ctx.chat.id,
          ctx.session.lastInlineMsgId,
          null,
          "‚úÖ –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!",
          getScheduleMenuInline(ctx.state?.currentUser)
        );
      } catch (e) {
        await logError(bot, e, userId, userInfo, "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞");
        await ctx.telegram.editMessageText(
          ctx.chat.id,
          ctx.session.lastInlineMsgId,
          null,
          "‚ùó " + e.message,
          getScheduleMenuInline(ctx.state?.currentUser)
        );
      }
      return;
    }

    if (ctx.session.awaitingSchedule && ctx.session.scheduleMode === "edit") {
      ctx.session.awaitingSchedule = false;
      const user = await getUserById(userId);
      const userInfo = {
        name: user?.name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
        username: user?.username,
        first_name: ctx.from.first_name,
        last_name: ctx.from.last_name,
      };

      try {
        await logScheduleAction(bot, userId, userInfo, "—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞", {
          scheduleText:
            ctx.message.text.trim().substring(0, 100) +
            (ctx.message.text.trim().length > 100 ? "..." : ""),
        });

        ctx.session.currentSheet = await ensureWeekSheetAndAsk(
          SPREADSHEET_ID,
          ctx.chat.id,
          ctx.telegram,
          false,
          !!ctx.session.scheduleNextWeek
        );
        await upsertSchedule(
          SPREADSHEET_ID,
          ctx.session.currentSheet,
          ctx.message.text.trim(),
          userId,
          ctx.telegram
        );
        await ctx.telegram.editMessageText(
          ctx.chat.id,
          ctx.session.lastInlineMsgId,
          null,
          "‚úÖ –ì—Ä–∞—Ñ–∏–∫ –æ–±–Ω–æ–≤–ª—ë–Ω!",
          getScheduleMenuInline(ctx.state?.currentUser)
        );
      } catch (e) {
        await logError(bot, e, userId, userInfo, "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞");
        await ctx.telegram.editMessageText(
          ctx.chat.id,
          ctx.session.lastInlineMsgId,
          null,
          "‚ùó " + e.message,
          getScheduleMenuInline(ctx.state?.currentUser)
        );
      }
      return;
    }

    if (ctx.session.awaitingSupportAdminReply) {
      const targetId = ctx.session.supportReplyTarget;
      ctx.session.awaitingSupportAdminReply = false;
      ctx.session.supportReplyTarget = null;
      const replyText = ctx.message.text?.trim();
      const adminInfo = {
        name:
          ctx.from.first_name && ctx.from.last_name
            ? `${ctx.from.first_name} ${ctx.from.last_name}`
            : ctx.from.first_name || ctx.from.username || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
        username: ctx.from.username,
        first_name: ctx.from.first_name,
        last_name: ctx.from.last_name,
      };

      if (!replyText) {
        return ctx.reply("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç. –û—Ç–º–µ–Ω–µ–Ω–æ.", adminMenu());
      }

      try {
        await bot.telegram.sendMessage(String(targetId), `‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n${replyText}`);
        await ctx.reply("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.", adminMenu());
      } catch (e) {
        await logError(bot, e, userId, adminInfo, "–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É");
        await ctx.reply("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.", adminMenu());
      }
      return;
    }
  });
}

module.exports = { registerTextHandlers };
