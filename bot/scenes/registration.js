const { Scenes, Markup } = require("telegraf");
const { BRANCHES, ADMIN_IDS, ROLES } = require("../../config");
const { buildBranchKeyboard } = require("../menus");
const { pendingApprovalNotifications } = require("../state");
const { logAction, logError, logAuthAction } = require("../../services/logger");
const { upsertUserBasic, listUsersByRoleAndBranch } = require("../../services/users");

function createRegistrationScene(bot) {
  const registrationScene = new Scenes.BaseScene("registration");

  registrationScene.enter(async (ctx) => {
    ctx.session = ctx.session || {};
    ctx.session.registration = { stage: "name" };
    await ctx.reply(
      "üëã –ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –ò–º—è –∏ –§–∞–º–∏–ª–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ù–∞–ø—Ä–∏–º–µ—Ä, –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –±–µ–∑ –æ—Ç—á–µ—Å—Ç–≤–∞!",
      Markup.removeKeyboard()
    );
  });

  registrationScene.on("text", async (ctx) => {
    const userId = ctx.from.id.toString();
    ctx.session = ctx.session || {};
    const registrationState = ctx.session.registration || { stage: "name" };
    const name = ctx.message.text.trim();
    const userInfo = {
      name:
        ctx.from.first_name && ctx.from.last_name
          ? `${ctx.from.first_name} ${ctx.from.last_name}`
          : ctx.from.first_name || ctx.from.username || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
      username: ctx.from.username,
      first_name: ctx.from.first_name,
      last_name: ctx.from.last_name,
    };

    if (registrationState.stage !== "name") {
      return await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.");
    }

    if (!name || name.length < 3) {
      await logAction(bot, "–ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –§–ò–û", userId, userInfo, { enteredName: name });
      return await ctx.reply("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –§–ò–û (–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞)");
    }

    try {
      ctx.session.registration = {
        stage: "branch",
        name,
      };

      await ctx.reply("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ—Å—å:", buildBranchKeyboard("reg:branch"));
    } catch (err) {
      await logError(bot, err, userId, userInfo, "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é");
      return await ctx.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
  });

  registrationScene.action(/^reg:branch_(.+)$/, async (ctx) => {
    const branchId = ctx.match[1];
    const branch = BRANCHES.find((b) => b.id === branchId);
    await ctx.answerCbQuery();
    if (!branch) {
      return ctx.reply("–í—ã–±—Ä–∞–Ω–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
    }

    ctx.session = ctx.session || {};
    const registrationState = ctx.session.registration;
    if (!registrationState || registrationState.stage !== "branch" || !registrationState.name) {
      return ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /start.");
    }

    const userId = ctx.from.id.toString();
    const userInfo = {
      name:
        ctx.from.first_name && ctx.from.last_name
          ? `${ctx.from.first_name} ${ctx.from.last_name}`
          : ctx.from.first_name || ctx.from.username || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
      username: ctx.from.username,
      first_name: ctx.from.first_name,
      last_name: ctx.from.last_name,
    };

    try {
      await upsertUserBasic(userId, {
        name: registrationState.name,
        status: "pending",
        username: ctx.from.username ? `@${ctx.from.username}` : null,
        first_name: ctx.from.first_name || null,
        last_name: ctx.from.last_name || null,
        branch: branch.id,
      });

      await logAuthAction(bot, userId, userInfo, "–ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", {
        enteredName: registrationState.name,
        branch: branch.id,
      });

      const telegramUserInfo = ctx.from;
      const username = telegramUserInfo.username ? `@${telegramUserInfo.username}` : "–Ω–µ —É–∫–∞–∑–∞–Ω";
      const fullTelegramName = `${telegramUserInfo.first_name || ""} ${telegramUserInfo.last_name || ""}`.trim();

      for (const admin of ADMIN_IDS) {
        try {
          const sent = await bot.telegram.sendMessage(
            admin,
            `üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:\n` +
              `üë§ –í–≤–µ–¥—ë–Ω–Ω–æ–µ –§–ò–û: ${registrationState.name}\n` +
              `üîπ Telegram: ${fullTelegramName} (${username})\n` +
              `üè¢ –§–∏–ª–∏–∞–ª: ${branch.label}\n` +
              `üÜî Telegram ID: ${userId}`,
            Markup.inlineKeyboard([
              Markup.button.callback(`‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å`, `approve_${userId}`),
              Markup.button.callback(`‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å`, `reject_${userId}`),
            ])
          );
          if (sent?.message_id) {
            const current = pendingApprovalNotifications.get(userId) || [];
            current.push({ chatId: admin, messageId: sent.message_id });
            pendingApprovalNotifications.set(userId, current);
          }
        } catch (e) {
          console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É", admin, e.message);
          await logError(bot, e, userId, userInfo, "–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É");
        }
      }

      try {
        const seniorManagers = await listUsersByRoleAndBranch(ROLES.SENIOR, branch.id);
        const logistManagers = await listUsersByRoleAndBranch(ROLES.LOGIST, branch.id);
        const branchManagers = [...seniorManagers, ...logistManagers];
        const notified = new Set();
        for (const manager of branchManagers) {
          if (!manager?.id || notified.has(manager.id)) continue;
          notified.add(manager.id);
          try {
            const sent = await bot.telegram.sendMessage(
              String(manager.id),
              `üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –≤ –≤–∞—à–µ–º —Ñ–∏–ª–∏–∞–ª–µ (${branch.label}):\n` +
                `üë§ ${registrationState.name}\n` +
                `üîπ Telegram: ${fullTelegramName} (${username})\n` +
                `üÜî Telegram ID: ${userId}`,
              Markup.inlineKeyboard([
                Markup.button.callback(`‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å`, `approve_${userId}`),
                Markup.button.callback(`‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å`, `reject_${userId}`),
              ])
            );
            if (sent?.message_id) {
              const current = pendingApprovalNotifications.get(userId) || [];
              current.push({ chatId: manager.id, messageId: sent.message_id });
              pendingApprovalNotifications.set(userId, current);
            }
          } catch (mgrErr) {
            await logError(bot, mgrErr, manager.id, manager, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é –æ –∑–∞—è–≤–∫–µ");
          }
        }
      } catch (mgrListErr) {
        await logError(bot, mgrListErr, "system", {}, "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π —Ñ–∏–ª–∏–∞–ª–∞");
      }

      await ctx.reply("‚è≥ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.");
      ctx.session.registration = null;
      await ctx.scene.leave();
    } catch (err) {
      await logError(bot, err, userId, userInfo, "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é");
      await ctx.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
  });

  registrationScene.on("message", async (ctx) => {
    await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç");
  });

  registrationScene.leave((ctx) => {
    if (ctx.session) {
      delete ctx.session.registration;
    }
  });

  return registrationScene;
}

module.exports = { createRegistrationScene };
