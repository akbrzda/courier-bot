require("dotenv").config();
const { Telegraf, Scenes, Markup, session } = require("telegraf");
const { google } = require("googleapis");
const moment = require("moment-timezone");
const cron = require("node-cron");
const {
  ensureWeekSheetAndAsk,
  upsertSchedule,
  upsertScheduleForFio,
  getScheduleText,
  getAdminScheduleText,
  getBranchScheduleText,
  parseAndAppend,
  isScheduleSubmissionAllowed,
  getWeekBounds,
} = require("./grafik.js");
const { initSchema } = require("./db");
const {
  getUserById,
  upsertUserBasic,
  setUserStatus,
  deleteUser,
  listApprovedUsers,
  listAllUsers,
  updateUserName,
  updateUserBranch,
  listApprovedUsersWithoutBranch,
  updateUserRole,
  listUsersByRoleAndBranch,
} = require("./services.users");
const { logAction, logTabReport, logScheduleAction, logAuthAction, logError, logBotStart, logMenuNavigation, logMessageSent } = require("./logger");
const {
  getAllLinks,
  getLinkById,
  createLink,
  deleteLink,
  getAllTrainingMaterials,
  getTrainingMaterialById,
  createTrainingMaterial,
  deleteTrainingMaterial,
} = require("./services.content");
const bot = new Telegraf(process.env.BOT_TOKEN);
const BRANCHES = [
  { id: "surgut_1", label: "–°—É—Ä–≥—É—Ç 1 (30 –ª–µ—Ç –ø–æ–±–µ–¥—ã)" },
  { id: "surgut_2", label: "–°—É—Ä–≥—É—Ç 2 (–£—Å–æ–ª—å—Ü–µ–≤–∞)" },
  { id: "surgut_3", label: "–°—É—Ä–≥—É—Ç 3 (–ú–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω–∞—è)" },
];
const ADMIN_IDS = (process.env.ADMIN_IDS || process.env.ADMIN_ID || "")
  .split(",")
  .map((s) => s.trim())
  .filter(Boolean);
const pendingApprovalNotifications = new Map();

const ROLES = Object.freeze({
  COURIER: "courier",
  SENIOR: "senior",
  LOGIST: "logist",
  ADMIN: "admin",
});

const BRANCH_MANAGER_ROLES = new Set([ROLES.SENIOR, ROLES.LOGIST, ROLES.ADMIN]);
const MANAGER_ROLES = new Set([ROLES.SENIOR, ROLES.LOGIST, ROLES.ADMIN]);

function getUserRole(user) {
  return user?.role || ROLES.COURIER;
}

async function ensureRoleState(ctx) {
  const userId = ctx.from?.id;
  if (!userId) return;
  ctx.state = ctx.state || {};
  if (!ctx.state.currentUser) {
    ctx.state.currentUser = await getUserById(String(userId));
  }
  let user = ctx.state.currentUser;
  ctx.state.isAdmin = computeAdminFlag(userId, user);
  if (ctx.state.isAdmin && getUserRole(user) !== ROLES.ADMIN) {
    user = { ...(user || {}), role: ROLES.ADMIN };
    ctx.state.currentUser = user;
  }
  ctx.state.isManager = ctx.state.isAdmin || hasManagerRights(user);
  ctx.state.isBranchManager = ctx.state.isAdmin || hasBranchManagerRights(user);
}

function computeAdminFlag(userId, user) {
  if (!userId) return false;
  if (ADMIN_IDS.includes(String(userId))) return true;
  return getUserRole(user) === ROLES.ADMIN;
}

function hasManagerRights(user) {
  return MANAGER_ROLES.has(getUserRole(user));
}

function hasBranchManagerRights(user) {
  return BRANCH_MANAGER_ROLES.has(getUserRole(user));
}

function canAccessReports(user) {
  const role = getUserRole(user);
  return role === ROLES.COURIER || role === ROLES.ADMIN || role === ROLES.SENIOR;
}

const ROLE_OPTIONS = [
  { id: ROLES.COURIER, label: "–ö—É—Ä—å–µ—Ä" },
  { id: ROLES.SENIOR, label: "–°—Ç–∞—Ä—à–∏–π –∫—É—Ä—å–µ—Ä" },
  { id: ROLES.LOGIST, label: "–õ–æ–≥–∏—Å—Ç" },
];

function getRoleLabel(role) {
  switch (role) {
    case ROLES.SENIOR:
      return "–°—Ç–∞—Ä—à–∏–π –∫—É—Ä—å–µ—Ä";
    case ROLES.LOGIST:
      return "–õ–æ–≥–∏—Å—Ç";
    case ROLES.ADMIN:
      return "–ê–¥–º–∏–Ω";
    default:
      return "–ö—É—Ä—å–µ—Ä";
  }
}

function getBranchLabel(branchId) {
  const branch = BRANCHES.find((b) => b.id === branchId);
  return branch ? branch.label : "–§–∏–ª–∏–∞–ª –Ω–µ –≤—ã–±—Ä–∞–Ω";
}

function buildBranchKeyboard(prefix) {
  return Markup.inlineKeyboard(BRANCHES.map((branch) => [Markup.button.callback(branch.label, `${prefix}_${branch.id}`)]));
}

async function notifyUsersWithoutBranch() {
  try {
    const users = await listApprovedUsersWithoutBranch();
    if (!users.length) {
      console.log("[Branch] –í—Å–µ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –∫—É—Ä—å–µ—Ä—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ —Ñ–∏–ª–∏–∞–ª");
      return;
    }

    console.log(`[Branch] –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–±–æ—Ä —Ñ–∏–ª–∏–∞–ª–∞ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º`);
    for (const user of users) {
      try {
        await bot.telegram.sendMessage(String(user.id), "–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª:", buildBranchKeyboard("branch:select"));
        await logAction(bot, "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤—ã–±–æ—Ä–µ —Ñ–∏–ª–∏–∞–ª–∞", user.id, {
          name: user.name,
          username: user.username,
        });
      } catch (err) {
        await logError(bot, err, user.id, { name: user.name, username: user.username }, "–†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª–∏–∞–ª–∞");
      }

      await new Promise((resolve) => setTimeout(resolve, 50));
    }
  } catch (err) {
    console.error("–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∫—É—Ä—å–µ—Ä–æ–≤ –±–µ–∑ —Ñ–∏–ª–∏–∞–ª–∞:", err.message);
  }
}
const SPREADSHEET_ID = process.env.GRAFIK;

function getPreviousWeekRange() {
  const now = new Date();
  const day = now.getDay();
  const currentMonday = new Date(now);
  currentMonday.setDate(now.getDate() - ((day + 6) % 7));
  const lastMonday = new Date(currentMonday);
  lastMonday.setDate(currentMonday.getDate() - 7);
  const lastSunday = new Date(lastMonday);
  lastSunday.setDate(lastMonday.getDate() + 6);
  lastMonday.setHours(0, 0, 0, 0);
  lastSunday.setHours(23, 59, 59, 999);
  return { fromDate: lastMonday, toDate: lastSunday };
}

cron.schedule(
  "0 12 * * 5",
  async () => {
    const now = moment().tz("Asia/Yekaterinburg");
    console.log(`[–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ] –†–∞—Å—Å—ã–ª–∞—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ ${now.format("YYYY-MM-DD HH:mm")}`);

    try {
      await logAction(
        bot,
        "–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π",
        "system",
        {},
        {
          scheduledTime: now.format("YYYY-MM-DD HH:mm"),
          dayOfWeek: "–ø—è—Ç–Ω–∏—Ü–∞",
        }
      );

      const approvedUsers = await listApprovedUsers();
      let successCount = 0;
      let errorCount = 0;

      for (const u of approvedUsers) {
        let attempt = 0;
        let sent = false;
        while (attempt < 4 && !sent) {
          try {
            await bot.telegram.sendMessage(
              String(u.id),
              "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–µ–º! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –≥—Ä–∞—Ñ–∏–∫ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫¬ª –≤ –º–µ–Ω—é."
            );
            successCount++;
            sent = true;
          } catch (e) {
            attempt++;
            const baseWait = 150;
            const waitMs = baseWait * Math.pow(2, attempt);
            console.error(`[–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ] –û—à–∏–±–∫–∞ –¥–ª—è ${u.id}, –ø–æ–ø—ã—Ç–∫–∞ ${attempt}:`, e.message);
            if (e && e.response && e.response.error_code === 429) {
              await new Promise((r) => setTimeout(r, waitMs + 500));
            } else {
              await new Promise((r) => setTimeout(r, waitMs));
            }
            if (attempt >= 4) {
              errorCount++;
              await logError(bot, e, u.id, { name: u.name, username: u.username }, "–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è");
            }
          }
        }

        await new Promise((r) => setTimeout(r, 35));
      }

      await logAction(
        bot,
        "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π",
        "system",
        {},
        {
          totalUsers: approvedUsers.length,
          successCount,
          errorCount,
        }
      );
    } catch (e) {
      console.error("[–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ] –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", e.message);
      await logError(bot, e, "system", {}, "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π");
    }
  },
  { timezone: "Asia/Yekaterinburg" }
);

function parseDate(str) {
  if (!str || typeof str !== "string" || !str.includes(".")) return null;
  const [day, month, year] = str.split(".");
  return new Date(`${month}/${day}/${year}`);
}

function escapeHtml(value) {
  if (value === undefined || value === null) return "";
  return String(value).replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
}

function getMainMenuInline(user = null) {
  const buttons = [];
  if (canAccessReports(user)) {
    buttons.push([Markup.button.callback("üìÖ –¢–∞–±–µ–ª—å", "menu:report")]);
  }
  buttons.push([Markup.button.callback("üìä –ì—Ä–∞—Ñ–∏–∫", "menu:schedule")]);
  buttons.push([Markup.button.callback("üîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏", "menu:links")]);
  buttons.push([Markup.button.callback("üìö –û–±—É—á–µ–Ω–∏–µ", "menu:training")]);
  buttons.push([Markup.button.callback("‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É", "support:start")]);
  return Markup.inlineKeyboard(buttons);
}

function isAdminId(id, user = null) {
  if (!id) return false;
  if (ADMIN_IDS.includes(String(id))) return true;
  return getUserRole(user) === ROLES.ADMIN;
}

function getReportMenuInline() {
  return Markup.inlineKeyboard([
    [Markup.button.callback("üìÖ –ó–∞ —Å–µ–≥–æ–¥–Ω—è", "report:today")],
    [Markup.button.callback("üìÜ –ó–∞ –≤—á–µ—Ä–∞", "report:yesterday")],
    [Markup.button.callback("üìä –¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è", "report:week_current")],
    [Markup.button.callback("üìä –ü—Ä–æ—à–ª–∞—è –Ω–µ–¥–µ–ª—è", "report:week_prev")],
    [Markup.button.callback("üóì –≠—Ç–æ—Ç –º–µ—Å—è—Ü", "report:month_current")],
    [Markup.button.callback("üóì –ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü", "report:month_prev")],
    [Markup.button.callback("üìÖ –í—ã–±—Ä–∞—Ç—å –ø–µ—Ä–∏–æ–¥‚Ä¶", "report:custom")],
    [Markup.button.callback("‚óÄÔ∏è –ù–∞–∑–∞–¥", "menu:main")],
  ]);
}

function getScheduleMenuInline(user = null) {
  const role = getUserRole(user);
  const buttons = [];

  if (role !== ROLES.LOGIST) {
    buttons.push([Markup.button.callback("üëÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥—Ä–∞—Ñ–∏–∫", "schedule:view")]),
      buttons.push([Markup.button.callback("‚ûï –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫", "schedule:send")]),
      buttons.push([Markup.button.callback("üõ† –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫", "schedule:edit")]);
  }
  if (hasBranchManagerRights(user) && (getUserRole(user) !== ROLES.ADMIN || user?.branch)) {
    buttons.push([Markup.button.callback("üìä –ì—Ä–∞—Ñ–∏–∫ —Ñ–∏–ª–∏–∞–ª–∞", "schedule:branch")]);
  }
  if (!buttons.length) {
    buttons.push([Markup.button.callback("üìä –ì—Ä–∞—Ñ–∏–∫", "schedule:view")]);
  }
  buttons.push([Markup.button.callback("‚óÄÔ∏è –ù–∞–∑–∞–¥", "menu:main")]);
  return Markup.inlineKeyboard(buttons);
}
function getBackInlineMenu(callbackBack) {
  return Markup.inlineKeyboard([[Markup.button.callback("‚óÄÔ∏è –ù–∞–∑–∞–¥", callbackBack)]]);
}

function adminMenu() {
  return Markup.keyboard([
    ["üë• –°–ø–∏—Å–æ–∫ –∫—É—Ä—å–µ—Ä–æ–≤", "‚ùå –£–¥–∞–ª–∏—Ç—å –∫—É—Ä—å–µ—Ä–∞"],
    ["üìã –ì—Ä–∞—Ñ–∏–∫: —Ç–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è", "üìã –ì—Ä–∞—Ñ–∏–∫: —Å–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è"],
    ["‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –§–ò–û –∫—É—Ä—å–µ—Ä–∞", "üì¢ –†–∞—Å—Å—ã–ª–∫–∞"],
    ["üîó –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∞–º–∏", "üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏–µ–º"],
    ["üéØ –ù–∞–∑–Ω–∞—á–∏—Ç—å —Ä–æ–ª—å"],
  ]).resize();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
function createPaginatedKeyboard(items, page, itemsPerPage, callbackPrefix, isAdmin = false) {
  const start = page * itemsPerPage;
  const end = start + itemsPerPage;
  const pageItems = items.slice(start, end);
  const totalPages = Math.ceil(items.length / itemsPerPage);

  const keyboard = [];

  // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∞–¥–º–∏–Ω–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω-—Ä–µ–∂–∏–º)
  if (isAdmin) {
    keyboard.push([Markup.button.callback("‚ûï –î–æ–±–∞–≤–∏—Ç—å", `${callbackPrefix}:add`), Markup.button.callback("‚ùå –£–¥–∞–ª–∏—Ç—å", `${callbackPrefix}:delete`)]);
  }

  // –≠–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞
  pageItems.forEach((item) => {
    if (callbackPrefix === "links") {
      keyboard.push([Markup.button.url(item.title, item.url)]);
    } else {
      keyboard.push([Markup.button.callback(item.title, `training:view_${item.id}`)]);
    }
  });

  // –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (–µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü –±–æ–ª—å—à–µ 1)
  if (totalPages > 1) {
    const paginationButtons = [];
    if (page > 0) {
      paginationButtons.push(Markup.button.callback("‚¨ÖÔ∏è", `${callbackPrefix}:page_${page - 1}`));
    }
    paginationButtons.push(Markup.button.callback(`${page + 1}/${totalPages}`, `${callbackPrefix}:noop`));
    if (page < totalPages - 1) {
      paginationButtons.push(Markup.button.callback("‚û°Ô∏è", `${callbackPrefix}:page_${page + 1}`));
    }
    keyboard.push(paginationButtons);
  }

  // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
  if (!isAdmin) {
    keyboard.push([Markup.button.callback("‚óÄÔ∏è –ù–∞–∑–∞–¥", "menu:main")]);
  }

  return Markup.inlineKeyboard(keyboard);
}

const registrationScene = new Scenes.BaseScene("registration");
const changeCourierNameScene = new Scenes.BaseScene("changeCourierName");

// –°—Ü–µ–Ω—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∞–º–∏
const addLinkScene = new Scenes.BaseScene("addLink");
const deleteLinkScene = new Scenes.BaseScene("deleteLink");

// –°—Ü–µ–Ω—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏–µ–º
const addTrainingScene = new Scenes.BaseScene("addTraining");
const deleteTrainingScene = new Scenes.BaseScene("deleteTraining");
const assignRoleScene = new Scenes.BaseScene("assignRole");

assignRoleScene.enter(async (ctx) => {
  await ensureRoleState(ctx);
  const userId = ctx.from.id.toString();
  const actingUser = ctx.state?.currentUser || (await getUserById(userId));
  if (!isAdminId(userId, actingUser)) {
    await ctx.reply("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤");
    return ctx.scene.leave();
  }

  try {
    const approvedUsers = await listApprovedUsers();
    if (approvedUsers.length === 0) {
      await ctx.reply("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–µ–π.", adminMenu());
      return ctx.scene.leave();
    }
    ctx.session = ctx.session || {};
    ctx.session.assignRoleTarget = null;

    const keyboard = approvedUsers.map((u) => {
      const roleLabel = getRoleLabel(u.role);
      const branchLabel = getBranchLabel(u.branch);
      return [Markup.button.callback(`${u.name} ‚Ä¢ ${roleLabel}`, `assignRole_select_${u.id}`)];
    });
    keyboard.push([Markup.button.callback("‚ùå –û—Ç–º–µ–Ω–∞", "assignRole:cancel")]);
    await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏:", Markup.inlineKeyboard(keyboard));
  } catch (error) {
    await ctx.reply("‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: " + error.message, adminMenu());
    return ctx.scene.leave();
  }
});

assignRoleScene.action("assignRole:cancel", async (ctx) => {
  await ctx.answerCbQuery("–û—Ç–º–µ–Ω–µ–Ω–æ");
  try {
    await ctx.deleteMessage();
  } catch (_) {}
  return ctx.scene.leave();
});

assignRoleScene.action(/^assignRole_select_(.+)$/, async (ctx) => {
  await ensureRoleState(ctx);
  const targetId = ctx.match[1];
  const targetUser = await getUserById(targetId);
  if (!targetUser) {
    await ctx.answerCbQuery("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
    return;
  }
  ctx.session = ctx.session || {};
  ctx.session.assignRoleTarget = targetId;

  const buttons = ROLE_OPTIONS.map((opt) => {
    const isCurrent = opt.id === getUserRole(targetUser);
    return [Markup.button.callback(`${opt.label}${isCurrent ? " ‚úÖ" : ""}`, `assignRole_set_${opt.id}`)];
  });
  buttons.push([Markup.button.callback("‚óÄÔ∏è –ù–∞–∑–∞–¥", "assignRole:back")]);

  await ctx.answerCbQuery();
  try {
    await ctx.editMessageText(
      `–í—ã–±—Ä–∞–Ω: ${targetUser.name}\n–¢–µ–∫—É—â–∞—è —Ä–æ–ª—å: ${getRoleLabel(targetUser.role)}\n–§–∏–ª–∏–∞–ª: ${getBranchLabel(targetUser.branch)}`,
      Markup.inlineKeyboard(buttons)
    );
  } catch (err) {
    await ctx.reply(
      `–í—ã–±—Ä–∞–Ω: ${targetUser.name}\n–¢–µ–∫—É—â–∞—è —Ä–æ–ª—å: ${getRoleLabel(targetUser.role)}\n–§–∏–ª–∏–∞–ª: ${getBranchLabel(targetUser.branch)}`,
      Markup.inlineKeyboard(buttons)
    );
  }
});

assignRoleScene.action("assignRole:back", async (ctx) => {
  await ctx.answerCbQuery();
  try {
    await ctx.deleteMessage();
  } catch (_) {}
  return ctx.scene.reenter();
});

assignRoleScene.action(/^assignRole_set_(.+)$/, async (ctx) => {
  await ensureRoleState(ctx);
  const newRole = ctx.match[1];
  const targetId = ctx.session?.assignRoleTarget;
  if (!targetId) {
    await ctx.answerCbQuery("–ù–µ –≤—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å");
    return;
  }

  const actorId = ctx.from.id.toString();
  const actingUser = ctx.state?.currentUser || (await getUserById(actorId));
  if (!isAdminId(actorId, actingUser)) {
    await ctx.answerCbQuery("–ù–µ—Ç –ø—Ä–∞–≤");
    return;
  }

  const normalizedRole = ROLE_OPTIONS.find((opt) => opt.id === newRole)?.id;
  if (!normalizedRole) {
    await ctx.answerCbQuery("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å");
    return;
  }

  const targetUser = await getUserById(targetId);
  if (!targetUser) {
    await ctx.answerCbQuery("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
    return;
  }

  if (getUserRole(targetUser) === normalizedRole) {
    await ctx.answerCbQuery("–£–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ");
    return;
  }

  if (BRANCH_MANAGER_ROLES.has(normalizedRole) && !targetUser.branch) {
    await ctx.answerCbQuery();
    await ctx.reply("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∑–Ω–∞—á—å—Ç–µ —Ñ–∏–ª–∏–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∑–∞—Ç–µ–º —Ä–æ–ª—å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è.", adminMenu());
    return ctx.scene.leave();
  }

  try {
    await updateUserRole(targetId, normalizedRole);
    await ctx.answerCbQuery("–†–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞");
    await ctx.reply(`–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${targetUser.name} –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: ${getRoleLabel(normalizedRole)}.`, adminMenu());

    await logAction(
      bot,
      "–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–∏",
      actorId,
      {
        name:
          actingUser?.name ||
          (ctx.from.first_name && ctx.from.last_name
            ? `${ctx.from.first_name} ${ctx.from.last_name}`
            : ctx.from.first_name || ctx.from.username || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
        username: ctx.from.username,
        first_name: ctx.from.first_name,
        last_name: ctx.from.last_name,
      },
      {
        targetId,
        targetName: targetUser.name,
        newRole: normalizedRole,
      }
    );

    try {
      await bot.telegram.sendMessage(String(targetId), `–í–∞—à–∞ —Ä–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞: ${getRoleLabel(normalizedRole)}.`);
    } catch (notifyErr) {
      console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Å–º–µ–Ω–µ —Ä–æ–ª–∏:", notifyErr.message);
    }
  } catch (error) {
    await ctx.answerCbQuery("–û—à–∏–±–∫–∞");
    await ctx.reply("‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–æ–ª–∏: " + error.message, adminMenu());
  }

  return ctx.scene.leave();
});

registrationScene.enter(async (ctx) => {
  const userId = ctx.from.id.toString();
  ctx.session = ctx.session || {};
  ctx.session.registration = { stage: "name" };
  await ctx.reply(
    "üëã –ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –ò–º—è –∏ –§–∞–º–∏–ª–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ù–∞–ø—Ä–∏–º–µ—Ä, –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –±–µ–∑ –æ—Ç—á–µ—Å—Ç–≤–∞!",
    Markup.removeKeyboard()
  );
});

registrationScene.on("text", async (ctx) => {
  const userId = ctx.from.id.toString();
  ctx.session = ctx.session || {};
  const registrationState = ctx.session.registration || { stage: "name" };
  const name = ctx.message.text.trim();
  const userInfo = {
    name:
      ctx.from.first_name && ctx.from.last_name
        ? `${ctx.from.first_name} ${ctx.from.last_name}`
        : ctx.from.first_name || ctx.from.username || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
    username: ctx.from.username,
    first_name: ctx.from.first_name,
    last_name: ctx.from.last_name,
  };

  if (registrationState.stage !== "name") {
    return await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.");
  }

  if (!name || name.length < 3) {
    await logAction(bot, "–ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –§–ò–û", userId, userInfo, { enteredName: name });
    return await ctx.reply("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –§–ò–û (–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞)");
  }

  try {
    ctx.session.registration = {
      stage: "branch",
      name,
    };

    await ctx.reply("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ—Å—å:", buildBranchKeyboard("reg:branch"));
  } catch (err) {
    await logError(bot, err, userId, userInfo, "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é");
    return await ctx.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
});

registrationScene.action(/^reg:branch_(.+)$/, async (ctx) => {
  const branchId = ctx.match[1];
  const branch = BRANCHES.find((b) => b.id === branchId);
  await ctx.answerCbQuery();
  if (!branch) {
    return ctx.reply("–í—ã–±—Ä–∞–Ω–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
  }

  ctx.session = ctx.session || {};
  const registrationState = ctx.session.registration;
  if (!registrationState || registrationState.stage !== "branch" || !registrationState.name) {
    return ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /start.");
  }

  const userId = ctx.from.id.toString();
  const userInfo = {
    name:
      ctx.from.first_name && ctx.from.last_name
        ? `${ctx.from.first_name} ${ctx.from.last_name}`
        : ctx.from.first_name || ctx.from.username || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
    username: ctx.from.username,
    first_name: ctx.from.first_name,
    last_name: ctx.from.last_name,
  };

  try {
    await upsertUserBasic(userId, {
      name: registrationState.name,
      status: "pending",
      username: ctx.from.username ? `@${ctx.from.username}` : null,
      first_name: ctx.from.first_name || null,
      last_name: ctx.from.last_name || null,
      branch: branch.id,
    });

    await logAuthAction(bot, userId, userInfo, "–ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", {
      enteredName: registrationState.name,
      branch: branch.id,
    });

    const telegramUserInfo = ctx.from;
    const username = telegramUserInfo.username ? `@${telegramUserInfo.username}` : "–Ω–µ —É–∫–∞–∑–∞–Ω";
    const fullTelegramName = `${telegramUserInfo.first_name || ""} ${telegramUserInfo.last_name || ""}`.trim();

    for (const admin of ADMIN_IDS) {
      try {
        const sent = await bot.telegram.sendMessage(
          admin,
          `üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:\n` +
            `üë§ –í–≤–µ–¥—ë–Ω–Ω–æ–µ –§–ò–û: ${registrationState.name}\n` +
            `üîπ Telegram: ${fullTelegramName} (${username})\n` +
            `üè¢ –§–∏–ª–∏–∞–ª: ${branch.label}\n` +
            `üÜî Telegram ID: ${userId}`,
          Markup.inlineKeyboard([
            Markup.button.callback(`‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å`, `approve_${userId}`),
            Markup.button.callback(`‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å`, `reject_${userId}`),
          ])
        );
        if (sent?.message_id) {
          const current = pendingApprovalNotifications.get(userId) || [];
          current.push({ chatId: admin, messageId: sent.message_id });
          pendingApprovalNotifications.set(userId, current);
        }
      } catch (e) {
        console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É", admin, e.message);
        await logError(bot, e, userId, userInfo, "–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É");
      }
    }

    try {
      const seniorManagers = await listUsersByRoleAndBranch(ROLES.SENIOR, branch.id);
      const logistManagers = await listUsersByRoleAndBranch(ROLES.LOGIST, branch.id);
      const branchManagers = [...seniorManagers, ...logistManagers];
      const notified = new Set();
      for (const manager of branchManagers) {
        if (!manager?.id || notified.has(manager.id)) continue;
        notified.add(manager.id);
        try {
          const sent = await bot.telegram.sendMessage(
            String(manager.id),
            `üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –≤ –≤–∞—à–µ–º —Ñ–∏–ª–∏–∞–ª–µ (${branch.label}):\n` +
              `üë§ ${registrationState.name}\n` +
              `üîπ Telegram: ${fullTelegramName} (${username})\n` +
              `üÜî Telegram ID: ${userId}`,
            Markup.inlineKeyboard([
              Markup.button.callback(`‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å`, `approve_${userId}`),
              Markup.button.callback(`‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å`, `reject_${userId}`),
            ])
          );
          if (sent?.message_id) {
            const current = pendingApprovalNotifications.get(userId) || [];
            current.push({ chatId: manager.id, messageId: sent.message_id });
            pendingApprovalNotifications.set(userId, current);
          }
        } catch (mgrErr) {
          await logError(bot, mgrErr, manager.id, manager, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é –æ –∑–∞—è–≤–∫–µ");
        }
      }
    } catch (mgrListErr) {
      await logError(bot, mgrListErr, "system", {}, "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π —Ñ–∏–ª–∏–∞–ª–∞");
    }

    await ctx.reply("‚è≥ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.");
    ctx.session.registration = null;
    await ctx.scene.leave();
  } catch (err) {
    await logError(bot, err, userId, userInfo, "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é");
    await ctx.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
});

registrationScene.on("message", async (ctx) => {
  await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç");
});

registrationScene.leave((ctx) => {
  if (ctx.session) {
    delete ctx.session.registration;
  }
});

const deleteCourierScene = new Scenes.BaseScene("deleteCourier");
const broadcastScene = new Scenes.BaseScene("broadcast");
broadcastScene.enter(async (ctx) => {
  await ensureRoleState(ctx);
  if (!ctx.state?.isAdmin) {
    await ctx.reply("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤");
    return ctx.scene.leave();
  }
  ctx.session = ctx.session || {};
  ctx.session.broadcastText = null;
  ctx.session.broadcastPhoto = null;
  ctx.session.broadcastLinkUrl = null;
  ctx.session.broadcastLinkTitle = null;
  ctx.session.broadcastStep = "text"; // text, photo, link_url, link_title, confirm

  await ctx.reply("üìù –®–∞–≥ 1/4: –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:", Markup.inlineKeyboard([[Markup.button.callback("‚ùå –û—Ç–º–µ–Ω–∞", "broadcast:cancel")]]));
});

broadcastScene.action("broadcast:cancel", async (ctx) => {
  await ctx.answerCbQuery("–û—Ç–º–µ–Ω–µ–Ω–æ");
  try {
    await ctx.deleteMessage();
  } catch (_) {}
  return ctx.scene.leave();
});

broadcastScene.action("broadcast:skip_photo", async (ctx) => {
  await ensureRoleState(ctx);
  await ctx.answerCbQuery();
  ctx.session.broadcastPhoto = null;
  ctx.session.broadcastStep = "link_url";

  await ctx.reply(
    "üîó –®–∞–≥ 3/4: –û—Ç–ø—Ä–∞–≤—å—Ç–µ URL —Å—Å—ã–ª–∫–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
    Markup.inlineKeyboard([
      [Markup.button.callback("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "broadcast:skip_link")],
      [Markup.button.callback("‚ùå –û—Ç–º–µ–Ω–∞", "broadcast:cancel")],
    ])
  );
});

broadcastScene.action("broadcast:skip_link", async (ctx) => {
  await ensureRoleState(ctx);
  await ctx.answerCbQuery();
  ctx.session.broadcastLinkUrl = null;
  ctx.session.broadcastLinkTitle = null;
  ctx.session.broadcastStep = "confirm";

  await showBroadcastPreview(ctx);
});

async function showBroadcastPreview(ctx) {
  const text = ctx.session?.broadcastText || "";
  const photo = ctx.session?.broadcastPhoto;
  const linkUrl = ctx.session?.broadcastLinkUrl;
  const linkTitle = ctx.session?.broadcastLinkTitle;

  let previewText = "üìã –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n";
  previewText += `–¢–µ–∫—Å—Ç: ${text}\n`;
  if (photo) previewText += `üì∑ –§–æ—Ç–æ: –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ\n`;
  if (linkUrl) previewText += `üîó –°—Å—ã–ª–∫–∞: ${linkTitle} (${linkUrl})\n`;

  await ctx.reply(
    previewText + "\n‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:",
    Markup.inlineKeyboard([[Markup.button.callback("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", "broadcast:send")], [Markup.button.callback("‚ùå –û—Ç–º–µ–Ω–∞", "broadcast:cancel")]])
  );
}

broadcastScene.on("text", async (ctx) => {
  await ensureRoleState(ctx);
  if (!ctx.state?.isAdmin) {
    return ctx.reply("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤");
  }

  const text = ctx.message.text?.trim();
  const step = ctx.session.broadcastStep;

  if (step === "text") {
    if (!text) {
      return ctx.reply("–¢–µ–∫—Å—Ç –ø—É—Å—Ç. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –û—Ç–º–µ–Ω–∞.");
    }
    ctx.session.broadcastText = text;
    ctx.session.broadcastStep = "photo";

    await ctx.reply(
      "üì∑ –®–∞–≥ 2/4: –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
      Markup.inlineKeyboard([
        [Markup.button.callback("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "broadcast:skip_photo")],
        [Markup.button.callback("‚ùå –û—Ç–º–µ–Ω–∞", "broadcast:cancel")],
      ])
    );
  } else if (step === "link_url") {
    if (!text) {
      return ctx.reply("URL –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ URL –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.");
    }
    // –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è URL
    if (!text.startsWith("http://") && !text.startsWith("https://")) {
      return ctx.reply("‚ùå URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://");
    }
    ctx.session.broadcastLinkUrl = text;
    ctx.session.broadcastStep = "link_title";

    await ctx.reply(
      "‚úèÔ∏è –®–∞–≥ 4/4: –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å—Å—ã–ª–∫–∏:",
      Markup.inlineKeyboard([[Markup.button.callback("‚ùå –û—Ç–º–µ–Ω–∞", "broadcast:cancel")]])
    );
  } else if (step === "link_title") {
    if (!text) {
      return ctx.reply("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏.");
    }
    ctx.session.broadcastLinkTitle = text;
    ctx.session.broadcastStep = "confirm";

    await showBroadcastPreview(ctx);
  }
});

broadcastScene.on("photo", async (ctx) => {
  await ensureRoleState(ctx);
  if (!ctx.state?.isAdmin) {
    return ctx.reply("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤");
  }

  const step = ctx.session.broadcastStep;

  if (step === "photo") {
    const photo = ctx.message.photo;
    if (!photo || photo.length === 0) {
      return ctx.reply("–§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
    }

    // –ë–µ—Ä—ë–º —Ñ–æ—Ç–æ –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
    const fileId = photo[photo.length - 1].file_id;
    ctx.session.broadcastPhoto = fileId;
    ctx.session.broadcastStep = "link_url";

    await ctx.reply(
      "üîó –®–∞–≥ 3/4: –û—Ç–ø—Ä–∞–≤—å—Ç–µ URL —Å—Å—ã–ª–∫–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
      Markup.inlineKeyboard([
        [Markup.button.callback("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "broadcast:skip_link")],
        [Markup.button.callback("‚ùå –û—Ç–º–µ–Ω–∞", "broadcast:cancel")],
      ])
    );
  } else {
    await ctx.reply("–°–µ–π—á–∞—Å –æ–∂–∏–¥–∞–µ—Ç—Å—è –¥—Ä—É–≥–æ–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.");
  }
});

broadcastScene.action("broadcast:send", async (ctx) => {
  await ctx.answerCbQuery();
  try {
    await ctx.deleteMessage();
  } catch (_) {}

  const text = ctx.session?.broadcastText;
  const photo = ctx.session?.broadcastPhoto;
  const linkUrl = ctx.session?.broadcastLinkUrl;
  const linkTitle = ctx.session?.broadcastLinkTitle;

  if (!text) {
    await ctx.reply("–¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
    return ctx.scene.leave();
  }

  try {
    const users = await listAllUsers();
    let ok = 0,
      fail = 0;

    for (const u of users) {
      let attempt = 0;
      let sent = false;

      while (attempt < 4 && !sent) {
        try {
          const messageOptions = {};

          // –î–æ–±–∞–≤–ª—è–µ–º inline-–∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞
          if (linkUrl && linkTitle) {
            messageOptions.reply_markup = {
              inline_keyboard: [[{ text: linkTitle, url: linkUrl }]],
            };
          }

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
          if (photo) {
            await bot.telegram.sendPhoto(String(u.id), photo, {
              caption: text,
              ...messageOptions,
            });
          } else {
            await bot.telegram.sendMessage(String(u.id), text, messageOptions);
          }

          ok += 1;
          sent = true;
        } catch (e) {
          attempt++;
          const waitMs = 100 * Math.pow(2, attempt);
          if (e && e.response && e.response.error_code === 429) {
            await new Promise((r) => setTimeout(r, waitMs + 300));
          } else {
            await new Promise((r) => setTimeout(r, waitMs));
          }
          if (attempt >= 4) {
            fail += 1;
          }
        }
      }
      await new Promise((r) => setTimeout(r, 35));
    }

    await ctx.reply(`‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—Ö: ${ok}, –æ—à–∏–±–∫–∏: ${fail}.`, adminMenu());
  } catch (e) {
    await ctx.reply("‚ùó –û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: " + e.message, adminMenu());
  }

  return ctx.scene.leave();
});

deleteCourierScene.enter(async (ctx) => {
  await ensureRoleState(ctx);
  try {
    const approvedUsers = await listApprovedUsers();

    if (approvedUsers.length === 0) {
      await ctx.reply("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–æ–≤.", adminMenu());
      return await ctx.scene.leave();
    }

    const keyboard = approvedUsers.map((user) => {
      const secondary = user.username ? user.username : `ID:${user.id}`;
      return [Markup.button.callback(`${user.name} (${secondary})`, `delete_${user.id}`)];
    });

    await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—å–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", Markup.inlineKeyboard([...keyboard, [Markup.button.callback("‚ùå –û—Ç–º–µ–Ω–∞", "cancel_delete")]]));
  } catch (err) {
    console.error("[deleteCourierScene.enter] ERROR:", err);
    await ctx.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    await ctx.scene.leave();
  }
});

changeCourierNameScene.enter(async (ctx) => {
  await ensureRoleState(ctx);
  if (!ctx.state?.isAdmin) {
    await ctx.reply("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤");
    return ctx.scene.leave();
  }
  ctx.session = ctx.session || {};
  ctx.session.changeTarget = null;
  ctx.session.awaitingTarget = false;
  ctx.session.awaitingNewName = false;

  try {
    const approvedUsers = await listApprovedUsers();
    if (approvedUsers.length === 0) {
      await ctx.reply("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–æ–≤.");
      return ctx.scene.leave();
    }
    const keyboard = approvedUsers.map((u) => [Markup.button.callback(`${u.name} (${u.username || "ID:" + u.id})`, `changeName_${u.id}`)]);
    keyboard.push([Markup.button.callback("‚ùå –û—Ç–º–µ–Ω–∞", "changeName:cancel")]);
    await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—å–µ—Ä–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –§–ò–û:", Markup.inlineKeyboard(keyboard));
  } catch (e) {
    console.error("[changeCourierNameScene.enter]", e);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    return ctx.scene.leave();
  }
});

changeCourierNameScene.action("changeName:cancel", async (ctx) => {
  await ctx.answerCbQuery("–û—Ç–º–µ–Ω–µ–Ω–æ");
  try {
    await ctx.deleteMessage();
  } catch (_) {}
  return ctx.scene.leave();
});

changeCourierNameScene.action(/^changeName_(.+)$/, async (ctx) => {
  await ensureRoleState(ctx);
  if (!ctx.state?.isAdmin) {
    await ctx.answerCbQuery("–ù–µ—Ç –ø—Ä–∞–≤");
    return;
  }
  const targetId = ctx.match[1];
  ctx.session = ctx.session || {};
  ctx.session.changeTarget = targetId;
  ctx.session.awaitingNewName = true;
  await ctx.answerCbQuery();
  try {
    await ctx.deleteMessage();
  } catch (_) {}
  await ctx.reply(`–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –§–ò–û –¥–ª—è –∫—É—Ä—å–µ—Ä–∞ (ID: ${targetId}):`);
});

changeCourierNameScene.on("text", async (ctx) => {
  await ensureRoleState(ctx);
  if (!ctx.state?.isAdmin) {
    await ctx.reply("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤");
    return ctx.scene.leave();
  }
  ctx.session = ctx.session || {};
  if (!ctx.session.awaitingNewName || !ctx.session.changeTarget) {
    return ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—å–µ—Ä–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏.");
  }
  const newName = ctx.message.text.trim();
  if (!newName || newName.length < 3) {
    return ctx.reply("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –§–ò–û (–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞)");
  }
  try {
    await updateUserName(ctx.session.changeTarget, newName);
    await ctx.reply("‚úÖ –§–ò–û –æ–±–Ω–æ–≤–ª–µ–Ω–æ.");
    try {
      await bot.telegram.sendMessage(String(ctx.session.changeTarget), `‚úèÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ–±–Ω–æ–≤–∏–ª –≤–∞—à–µ –§–ò–û –Ω–∞: ${newName}`);
    } catch (e) {
      console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", e.message);
    }
  } catch (e) {
    console.error("[changeCourierNameScene.on(text)]", e);
    await ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –§–ò–û: " + e.message);
  }
  return ctx.scene.leave();
});

deleteCourierScene.action(/^delete_(.+)$/, async (ctx) => {
  try {
    await ensureRoleState(ctx);
    if (!ctx.state?.isAdmin) {
      await ctx.answerCbQuery("–ù–µ—Ç –ø—Ä–∞–≤");
      return;
    }

    const userId = ctx.match[1];
    const user = await getUserById(userId);
    if (!user) {
      await ctx.answerCbQuery("–ö—É—Ä—å–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω");
      return await ctx.scene.leave();
    }

    await deleteUser(userId);

    await ctx.editMessageText(`–ö—É—Ä—å–µ—Ä ${user.name} —É–¥–∞–ª—ë–Ω.`);
    await ctx.answerCbQuery("–ö—É—Ä—å–µ—Ä —É–¥–∞–ª—ë–Ω");

    try {
      await bot.telegram.sendMessage(userId, "‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª —É–¥–∞–ª—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.");
    } catch (err) {
      console.error("[deleteCourierScene.action] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:", userId, err);
    }

    return await ctx.scene.leave();
  } catch (err) {
    console.error("[deleteCourierScene.action] ERROR:", err);
    await ctx.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    await ctx.scene.leave();
  }
});

deleteCourierScene.action("cancel_delete", async (ctx) => {
  try {
    await ensureRoleState(ctx);
    await ctx.answerCbQuery("–û—Ç–º–µ–Ω–µ–Ω–æ");
    try {
      await ctx.deleteMessage();
    } catch (e) {
      console.warn("[deleteCourierScene.cancel_delete] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:", e);
    }
    return await ctx.scene.leave();
  } catch (err) {
    console.error("[deleteCourierScene.cancel_delete] ERROR:", err);
    await ctx.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    await ctx.scene.leave();
  }
});

deleteCourierScene.on("message", async (ctx) => {
  try {
    await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫—É—Ä—å–µ—Ä–∞.");
  } catch (err) {
    await ctx.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
});

// ============ –°–¶–ï–ù–´ –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –°–°–´–õ–ö–ê–ú–ò ============
addLinkScene.enter(async (ctx) => {
  await ensureRoleState(ctx);
  if (!ctx.state?.isAdmin) {
    await ctx.reply("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤");
    return ctx.scene.leave();
  }
  ctx.session = ctx.session || {};
  ctx.session.linkTitle = null;
  ctx.session.linkUrl = null;
  ctx.session.awaitingLinkTitle = true;
  await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏:", Markup.inlineKeyboard([[Markup.button.callback("‚ùå –û—Ç–º–µ–Ω–∞", "addLink:cancel")]]));
});

addLinkScene.action("addLink:cancel", async (ctx) => {
  await ctx.answerCbQuery("–û—Ç–º–µ–Ω–µ–Ω–æ");
  try {
    await ctx.deleteMessage();
  } catch (_) {}
  return ctx.scene.leave();
});

addLinkScene.on("text", async (ctx) => {
  await ensureRoleState(ctx);
  if (!ctx.state?.isAdmin) {
    return ctx.reply("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤");
  }
  ctx.session = ctx.session || {};
  const text = ctx.message.text.trim();

  if (ctx.session.awaitingLinkTitle) {
    if (!text) return ctx.reply("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.");
    ctx.session.linkTitle = text;
    ctx.session.awaitingLinkTitle = false;
    ctx.session.awaitingLinkUrl = true;
    return ctx.reply("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ URL:", Markup.inlineKeyboard([[Markup.button.callback("‚ùå –û—Ç–º–µ–Ω–∞", "addLink:cancel")]]));
  }

  if (ctx.session.awaitingLinkUrl) {
    if (!text || !text.startsWith("http")) {
      return ctx.reply("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL (–¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://)");
    }
    try {
      await createLink(ctx.session.linkTitle, text);

      const adminInfo = {
        name:
          ctx.from.first_name && ctx.from.last_name
            ? `${ctx.from.first_name} ${ctx.from.last_name}`
            : ctx.from.first_name || ctx.from.username || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
        username: ctx.from.username,
        first_name: ctx.from.first_name,
        last_name: ctx.from.last_name,
      };

      await logAction(bot, `–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏: ${ctx.session.linkTitle}`, ctx.from.id.toString(), adminInfo, { url: text }, "–õ–æ–≥–∏");

      await ctx.reply("‚úÖ –°—Å—ã–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", adminMenu());

      // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
      const users = await listApprovedUsers();
      for (const u of users) {
        try {
          await bot.telegram.sendMessage(
            String(u.id),
            `üîó –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –ø–æ–ª–µ–∑–Ω–∞—è —Å—Å—ã–ª–∫–∞: *${ctx.session.linkTitle}*\n\n–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª–µ "üîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏"`,
            { parse_mode: "Markdown" }
          );
        } catch (e) {
          console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${u.id}:`, e.message);
        }
        await new Promise((r) => setTimeout(r, 35));
      }
    } catch (e) {
      await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏: " + e.message, adminMenu());
    }
    return ctx.scene.leave();
  }
});

deleteLinkScene.enter(async (ctx) => {
  await ensureRoleState(ctx);
  if (!ctx.state?.isAdmin) {
    await ctx.reply("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤");
    return ctx.scene.leave();
  }
  try {
    const links = await getAllLinks();
    if (links.length === 0) {
      await ctx.reply("–ù–µ—Ç —Å—Å—ã–ª–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", adminMenu());
      return ctx.scene.leave();
    }
    const keyboard = links.map((link) => [Markup.button.callback(`${link.title}`, `deleteLink_${link.id}`)]);
    keyboard.push([Markup.button.callback("‚ùå –û—Ç–º–µ–Ω–∞", "deleteLink:cancel")]);
    await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", Markup.inlineKeyboard(keyboard));
  } catch (e) {
    await ctx.reply("‚ùå –û—à–∏–±–∫–∞: " + e.message, adminMenu());
    return ctx.scene.leave();
  }
});

deleteLinkScene.action("deleteLink:cancel", async (ctx) => {
  await ctx.answerCbQuery("–û—Ç–º–µ–Ω–µ–Ω–æ");
  try {
    await ctx.deleteMessage();
  } catch (_) {}
  return ctx.scene.leave();
});

deleteLinkScene.action(/^deleteLink_(.+)$/, async (ctx) => {
  await ensureRoleState(ctx);
  if (!ctx.state?.isAdmin) {
    await ctx.answerCbQuery("–ù–µ—Ç –ø—Ä–∞–≤");
    return;
  }
  const linkId = ctx.match[1];
  try {
    const link = await getLinkById(linkId);
    await deleteLink(linkId);

    const adminInfo = {
      name:
        ctx.from.first_name && ctx.from.last_name
          ? `${ctx.from.first_name} ${ctx.from.last_name}`
          : ctx.from.first_name || ctx.from.username || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
      username: ctx.from.username,
      first_name: ctx.from.first_name,
      last_name: ctx.from.last_name,
    };

    await logAction(bot, `–£–¥–∞–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏: ${link?.title || "ID:" + linkId}`, ctx.from.id.toString(), adminInfo, { linkId }, "–õ–æ–≥–∏");

    await ctx.answerCbQuery("–°—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞");
    await ctx.editMessageText("‚úÖ –°—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞!");
  } catch (e) {
    await ctx.answerCbQuery("–û—à–∏–±–∫–∞");
    await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: " + e.message);
  }
  return ctx.scene.leave();
});

// ============ –°–¶–ï–ù–´ –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –û–ë–£–ß–ï–ù–ò–ï–ú ============
addTrainingScene.enter(async (ctx) => {
  await ensureRoleState(ctx);
  if (!ctx.state?.isAdmin) {
    await ctx.reply("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤");
    return ctx.scene.leave();
  }
  ctx.session = ctx.session || {};
  ctx.session.trainingTitle = null;
  ctx.session.trainingContent = null;
  ctx.session.trainingMediaUrl = null;
  ctx.session.trainingMediaType = null;
  ctx.session.awaitingTrainingTitle = true;
  await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞:", Markup.inlineKeyboard([[Markup.button.callback("‚ùå –û—Ç–º–µ–Ω–∞", "addTraining:cancel")]]));
});

addTrainingScene.action("addTraining:cancel", async (ctx) => {
  await ctx.answerCbQuery("–û—Ç–º–µ–Ω–µ–Ω–æ");
  try {
    await ctx.deleteMessage();
  } catch (_) {}
  return ctx.scene.leave();
});

addTrainingScene.action("addTraining:skip", async (ctx) => {
  await ctx.answerCbQuery("–ü—Ä–æ–ø—É—â–µ–Ω–æ");
  try {
    await createTrainingMaterial(ctx.session.trainingTitle, ctx.session.trainingContent, null, null);

    const adminInfo = {
      name:
        ctx.from.first_name && ctx.from.last_name
          ? `${ctx.from.first_name} ${ctx.from.last_name}`
          : ctx.from.first_name || ctx.from.username || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
      username: ctx.from.username,
      first_name: ctx.from.first_name,
      last_name: ctx.from.last_name,
    };

    await logAction(
      bot,
      `–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è: ${ctx.session.trainingTitle} (—Ç–µ–∫—Å—Ç)`,
      ctx.from.id.toString(),
      adminInfo,
      { mediaType: "text" },
      "–õ–æ–≥–∏"
    );

    await ctx.reply("‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω –±–µ–∑ –º–µ–¥–∏–∞!", adminMenu());

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    const users = await listApprovedUsers();
    for (const u of users) {
      try {
        await bot.telegram.sendMessage(
          String(u.id),
          `üìö –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –æ–±—É—á–∞—é—â–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª: *${ctx.session.trainingTitle}*\n\n–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª–µ "üìö –û–±—É—á–µ–Ω–∏–µ"`,
          { parse_mode: "Markdown" }
        );
      } catch (e) {
        console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${u.id}:`, e.message);
      }
      await new Promise((r) => setTimeout(r, 35));
    }
  } catch (e) {
    await ctx.reply("‚ùå –û—à–∏–±–∫–∞: " + e.message, adminMenu());
  }
  return ctx.scene.leave();
});

addTrainingScene.on("text", async (ctx) => {
  await ensureRoleState(ctx);
  if (!ctx.state?.isAdmin) {
    return ctx.reply("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤");
  }
  ctx.session = ctx.session || {};
  const text = ctx.message.text.trim();

  if (ctx.session.awaitingTrainingTitle) {
    if (!text) return ctx.reply("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.");
    ctx.session.trainingTitle = text;
    ctx.session.awaitingTrainingTitle = false;
    ctx.session.awaitingTrainingContent = true;
    return ctx.reply("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–∞:", Markup.inlineKeyboard([[Markup.button.callback("‚ùå –û—Ç–º–µ–Ω–∞", "addTraining:cancel")]]));
  }

  if (ctx.session.awaitingTrainingContent) {
    if (!text) return ctx.reply("–¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.");
    ctx.session.trainingContent = text;
    ctx.session.awaitingTrainingContent = false;
    ctx.session.awaitingTrainingMedia = true;
    return ctx.reply(
      "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ —Ñ–æ—Ç–æ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å):",
      Markup.inlineKeyboard([
        [Markup.button.callback("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "addTraining:skip")],
        [Markup.button.callback("‚ùå –û—Ç–º–µ–Ω–∞", "addTraining:cancel")],
      ])
    );
  }

  if (ctx.session.awaitingTrainingMedia) {
    if (text.startsWith("http")) {
      ctx.session.trainingMediaUrl = text;
      ctx.session.trainingMediaType = "link";
      try {
        await createTrainingMaterial(
          ctx.session.trainingTitle,
          ctx.session.trainingContent,
          ctx.session.trainingMediaUrl,
          ctx.session.trainingMediaType
        );

        const adminInfo = {
          name:
            ctx.from.first_name && ctx.from.last_name
              ? `${ctx.from.first_name} ${ctx.from.last_name}`
              : ctx.from.first_name || ctx.from.username || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
          username: ctx.from.username,
          first_name: ctx.from.first_name,
          last_name: ctx.from.last_name,
        };

        await logAction(
          bot,
          `–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è: ${ctx.session.trainingTitle} (—Å—Å—ã–ª–∫–∞)`,
          ctx.from.id.toString(),
          adminInfo,
          { mediaType: "link", url: ctx.session.trainingMediaUrl },
          "–õ–æ–≥–∏"
        );

        await ctx.reply("‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω —Å–æ —Å—Å—ã–ª–∫–æ–π!", adminMenu());

        // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        const users = await listApprovedUsers();
        for (const u of users) {
          try {
            await bot.telegram.sendMessage(
              String(u.id),
              `üìö –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –æ–±—É—á–∞—é—â–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª: *${ctx.session.trainingTitle}*\n\n–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª–µ "üìö –û–±—É—á–µ–Ω–∏–µ"`,
              { parse_mode: "Markdown" }
            );
          } catch (e) {
            console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${u.id}:`, e.message);
          }
          await new Promise((r) => setTimeout(r, 35));
        }
      } catch (e) {
        await ctx.reply("‚ùå –û—à–∏–±–∫–∞: " + e.message, adminMenu());
      }
      return ctx.scene.leave();
    } else {
      return ctx.reply("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.");
    }
  }
});

addTrainingScene.on("photo", async (ctx) => {
  await ensureRoleState(ctx);
  if (!ctx.state?.isAdmin) {
    return ctx.reply("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤");
  }
  ctx.session = ctx.session || {};

  if (ctx.session.awaitingTrainingMedia) {
    const photo = ctx.message.photo[ctx.message.photo.length - 1];
    ctx.session.trainingMediaUrl = photo.file_id;
    ctx.session.trainingMediaType = "photo";
    try {
      await createTrainingMaterial(
        ctx.session.trainingTitle,
        ctx.session.trainingContent,
        ctx.session.trainingMediaUrl,
        ctx.session.trainingMediaType
      );

      const adminInfo = {
        name:
          ctx.from.first_name && ctx.from.last_name
            ? `${ctx.from.first_name} ${ctx.from.last_name}`
            : ctx.from.first_name || ctx.from.username || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
        username: ctx.from.username,
        first_name: ctx.from.first_name,
        last_name: ctx.from.last_name,
      };

      await logAction(
        bot,
        `–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è: ${ctx.session.trainingTitle} (—Ñ–æ—Ç–æ)`,
        ctx.from.id.toString(),
        adminInfo,
        { mediaType: "photo" },
        "–õ–æ–≥–∏"
      );

      await ctx.reply("‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω —Å —Ñ–æ—Ç–æ!", adminMenu());

      // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
      const users = await listApprovedUsers();
      for (const u of users) {
        try {
          await bot.telegram.sendMessage(
            String(u.id),
            `üìö –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –æ–±—É—á–∞—é—â–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª: *${ctx.session.trainingTitle}*\n\n–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª–µ "üìö –û–±—É—á–µ–Ω–∏–µ"`,
            { parse_mode: "Markdown" }
          );
        } catch (e) {
          console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${u.id}:`, e.message);
        }
        await new Promise((r) => setTimeout(r, 35));
      }
    } catch (e) {
      await ctx.reply("‚ùå –û—à–∏–±–∫–∞: " + e.message, adminMenu());
    }
    return ctx.scene.leave();
  }
});

deleteTrainingScene.enter(async (ctx) => {
  await ensureRoleState(ctx);
  if (!ctx.state?.isAdmin) {
    await ctx.reply("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤");
    return ctx.scene.leave();
  }
  try {
    const materials = await getAllTrainingMaterials();
    if (materials.length === 0) {
      await ctx.reply("–ù–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", adminMenu());
      return ctx.scene.leave();
    }
    const keyboard = materials.map((mat) => [Markup.button.callback(`${mat.title}`, `deleteTraining_${mat.id}`)]);
    keyboard.push([Markup.button.callback("‚ùå –û—Ç–º–µ–Ω–∞", "deleteTraining:cancel")]);
    await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", Markup.inlineKeyboard(keyboard));
  } catch (e) {
    await ctx.reply("‚ùå –û—à–∏–±–∫–∞: " + e.message, adminMenu());
    return ctx.scene.leave();
  }
});

deleteTrainingScene.action("deleteTraining:cancel", async (ctx) => {
  await ctx.answerCbQuery("–û—Ç–º–µ–Ω–µ–Ω–æ");
  try {
    await ctx.deleteMessage();
  } catch (_) {}
  return ctx.scene.leave();
});

deleteTrainingScene.action(/^deleteTraining_(.+)$/, async (ctx) => {
  await ensureRoleState(ctx);
  if (!ctx.state?.isAdmin) {
    await ctx.answerCbQuery("–ù–µ—Ç –ø—Ä–∞–≤");
    return;
  }
  const matId = ctx.match[1];
  try {
    const material = await getTrainingMaterialById(matId);
    await deleteTrainingMaterial(matId);

    const adminInfo = {
      name:
        ctx.from.first_name && ctx.from.last_name
          ? `${ctx.from.first_name} ${ctx.from.last_name}`
          : ctx.from.first_name || ctx.from.username || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
      username: ctx.from.username,
      first_name: ctx.from.first_name,
      last_name: ctx.from.last_name,
    };

    await logAction(
      bot,
      `–£–¥–∞–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è: ${material?.title || "ID:" + matId}`,
      ctx.from.id.toString(),
      adminInfo,
      { materialId: matId },
      "–õ–æ–≥–∏"
    );

    await ctx.answerCbQuery("–ú–∞—Ç–µ—Ä–∏–∞–ª —É–¥–∞–ª–µ–Ω");
    await ctx.editMessageText("‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª —É–¥–∞–ª–µ–Ω!");
  } catch (e) {
    await ctx.answerCbQuery("–û—à–∏–±–∫–∞");
    await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: " + e.message);
  }
  return ctx.scene.leave();
});

const stage = new Scenes.Stage([
  registrationScene,
  deleteCourierScene,
  broadcastScene,
  changeCourierNameScene,
  addLinkScene,
  deleteLinkScene,
  addTrainingScene,
  deleteTrainingScene,
  assignRoleScene,
]);
bot.use(session());
bot.use(stage.middleware());

bot.use(async (ctx, next) => {
  const fromId = ctx.from?.id;
  if (!fromId) {
    return next();
  }

  const userId = String(fromId);
  const callbackData = ctx.callbackQuery?.data || "";
  if (callbackData.startsWith("branch:select_") || callbackData.startsWith("reg:branch_")) {
    return next();
  }

  if (ctx.scene && ctx.scene.current && ctx.scene.current.id === "registration") {
    return next();
  }

  await ensureRoleState(ctx);
  const user = ctx.state.currentUser;

  if (user && user.status === "approved" && !user.branch) {
    const isStartCommand = ctx.updateType === "message" && ctx.message?.text?.startsWith("/start");
    ctx.session = ctx.session || {};

    if (ctx.updateType === "callback_query") {
      await ctx.answerCbQuery("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å");
    }

    if (!ctx.session.branchPromptShown && !isStartCommand) {
      ctx.session.branchPromptShown = true;
      await ctx.reply("–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª:", buildBranchKeyboard("branch:select"));
    }

    if (isStartCommand) {
      return next();
    }
    return;
  }

  return next();
});

bot.start(async (ctx) => {
  const userId = ctx.from.id.toString();
  const userInfo = {
    name:
      ctx.from.first_name && ctx.from.last_name
        ? `${ctx.from.first_name} ${ctx.from.last_name}`
        : ctx.from.first_name || ctx.from.username || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
    username: ctx.from.username,
    first_name: ctx.from.first_name,
    last_name: ctx.from.last_name,
  };

  try {
    ctx.state = ctx.state || {};
    const user = ctx.state.currentUser || (await getUserById(userId));
    ctx.state.currentUser = user;
    ctx.state.isAdmin = computeAdminFlag(userId, user);
    ctx.state.isManager = ctx.state.isAdmin || hasManagerRights(user);
    ctx.state.isBranchManager = hasBranchManagerRights(user);

    if (isAdminId(userId, user)) {
      await logBotStart(bot, userId, userInfo, true);
      return await ctx.reply("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!", adminMenu());
    }

    if (user?.status === "approved") {
      if (!user.branch) {
        ctx.session = ctx.session || {};
        ctx.session.branchPromptShown = true;
        await ctx.reply("–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª:", buildBranchKeyboard("branch:select"));
        return;
      }
      await logBotStart(bot, userId, { ...userInfo, name: user.name });
      return await ctx.reply(`${user.name}, –í—ã —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –±–æ—Ç–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`, getMainMenuInline(user));
    }

    if (user?.status === "pending") {
      await logBotStart(bot, userId, { ...userInfo, name: user.name });
      return await ctx.reply("‚è≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.");
    }

    await logBotStart(bot, userId, userInfo);
    return await ctx.scene.enter("registration");
  } catch (error) {
    await logError(bot, error, userId, userInfo, "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start");
    throw error;
  }
});

bot.hears("üë• –°–ø–∏—Å–æ–∫ –∫—É—Ä—å–µ—Ä–æ–≤", async (ctx) => {
  const userId = ctx.from.id.toString();
  const adminInfo = {
    name:
      ctx.from.first_name && ctx.from.last_name
        ? `${ctx.from.first_name} ${ctx.from.last_name}`
        : ctx.from.first_name || ctx.from.username || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
    username: ctx.from.username,
    first_name: ctx.from.first_name,
    last_name: ctx.from.last_name,
  };

  if (!isAdminId(userId, ctx.state.currentUser)) {
    await logAction(bot, "–ø–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–ø–∏—Å–∫—É –∫—É—Ä—å–µ—Ä–æ–≤ –±–µ–∑ –ø—Ä–∞–≤", userId, adminInfo);
    return await ctx.reply("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", getMainMenuInline(ctx.state.currentUser));
  }

  try {
    const approvedUsers = await listApprovedUsers();

    if (approvedUsers.length === 0) {
      return await ctx.reply("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–æ–≤.", adminMenu());
    }

    let message = "üìã –°–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–æ–≤:\n\n";
    approvedUsers.forEach((u, index) => {
      const secondary = u.username ? u.username : `ID:${u.id}`;
      const branchLabel = getBranchLabel(u.branch);
      const roleLabel = getRoleLabel(u.role);
      message += `${index + 1}. ${u.name} ‚Äî ${roleLabel}, ${branchLabel}\n`;
    });

    await ctx.reply(message, adminMenu());
  } catch (error) {
    await logError(bot, error, userId, adminInfo, "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫—É—Ä—å–µ—Ä–æ–≤");
    throw error;
  }
});

bot.hears("‚ùå –£–¥–∞–ª–∏—Ç—å –∫—É—Ä—å–µ—Ä–∞", async (ctx) => {
  await ensureRoleState(ctx);
  const userId = ctx.from.id.toString();
  const adminInfo = {
    name:
      ctx.from.first_name && ctx.from.last_name
        ? `${ctx.from.first_name} ${ctx.from.last_name}`
        : ctx.from.first_name || ctx.from.username || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
    username: ctx.from.username,
    first_name: ctx.from.first_name,
    last_name: ctx.from.last_name,
  };

  if (!ctx.state?.isAdmin) {
    await logAction(bot, "–ø–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫—É—Ä—å–µ—Ä–∞ –±–µ–∑ –ø—Ä–∞–≤", userId, adminInfo);
    return await ctx.reply("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", getMainMenuInline(ctx.state.currentUser));
  }
  await ctx.scene.enter("deleteCourier");
});

bot.hears("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –§–ò–û –∫—É—Ä—å–µ—Ä–∞", async (ctx) => {
  await ensureRoleState(ctx);
  const userId = ctx.from.id.toString();
  if (!ctx.state?.isAdmin) {
    await logAction(bot, "–ø–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –≤ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –§–ò–û –±–µ–∑ –ø—Ä–∞–≤", userId, { username: ctx.from.username });
    return await ctx.reply("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", getMainMenuInline(ctx.state.currentUser));
  }
  return await ctx.scene.enter("changeCourierName");
});

bot.hears("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", async (ctx) => {
  await ensureRoleState(ctx);
  const userId = ctx.from.id.toString();
  const adminInfo = {
    name:
      ctx.from.first_name && ctx.from.last_name
        ? `${ctx.from.first_name} ${ctx.from.last_name}`
        : ctx.from.first_name || ctx.from.username || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
    username: ctx.from.username,
    first_name: ctx.from.first_name,
    last_name: ctx.from.last_name,
  };

  if (!ctx.state?.isAdmin) {
    await logAction(bot, "–ø–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –±–µ–∑ –ø—Ä–∞–≤", userId, adminInfo);
    return await ctx.reply("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", getMainMenuInline(ctx.state.currentUser));
  }

  await ctx.scene.enter("broadcast");
});

bot.hears("üîó –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∞–º–∏", async (ctx) => {
  await ensureRoleState(ctx);
  const userId = ctx.from.id.toString();
  if (!ctx.state?.isAdmin) {
    return await ctx.reply("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤");
  }

  const adminInfo = {
    name:
      ctx.from.first_name && ctx.from.last_name
        ? `${ctx.from.first_name} ${ctx.from.last_name}`
        : ctx.from.first_name || ctx.from.username || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
    username: ctx.from.username,
    first_name: ctx.from.first_name,
    last_name: ctx.from.last_name,
  };

  await logAction(bot, "–û—Ç–∫—Ä—ã—Ç–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∞–º–∏", userId, adminInfo, {}, "–õ–æ–≥–∏");

  const links = await getAllLinks();
  if (links.length === 0) {
    return await ctx.reply("üìã –°–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –ø—É—Å—Ç", Markup.inlineKeyboard([[Markup.button.callback("‚ûï –î–æ–±–∞–≤–∏—Ç—å", "admin:addLink")]]));
  }

  const keyboard = createPaginatedKeyboard(links, 0, 6, "links", true);
  await ctx.reply("üîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:", keyboard);
});

bot.hears("üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏–µ–º", async (ctx) => {
  await ensureRoleState(ctx);
  const userId = ctx.from.id.toString();
  if (!ctx.state?.isAdmin) {
    return await ctx.reply("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤");
  }

  const adminInfo = {
    name:
      ctx.from.first_name && ctx.from.last_name
        ? `${ctx.from.first_name} ${ctx.from.last_name}`
        : ctx.from.first_name || ctx.from.username || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
    username: ctx.from.username,
    first_name: ctx.from.first_name,
    last_name: ctx.from.last_name,
  };

  await logAction(bot, "–û—Ç–∫—Ä—ã—Ç–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏–µ–º", userId, adminInfo, {}, "–õ–æ–≥–∏");

  const materials = await getAllTrainingMaterials();
  if (materials.length === 0) {
    return await ctx.reply("üìã –°–ø–∏—Å–æ–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø—É—Å—Ç", Markup.inlineKeyboard([[Markup.button.callback("‚ûï –î–æ–±–∞–≤–∏—Ç—å", "admin:addTraining")]]));
  }

  const keyboard = createPaginatedKeyboard(materials, 0, 6, "training", true);
  await ctx.reply("üìö –û–±—É—á–µ–Ω–∏–µ:", keyboard);
});

bot.hears("üéØ –ù–∞–∑–Ω–∞—á–∏—Ç—å —Ä–æ–ª—å", async (ctx) => {
  await ensureRoleState(ctx);
  const userId = ctx.from.id.toString();
  const actingUser = ctx.state?.currentUser || (await getUserById(userId));
  if (!isAdminId(userId, actingUser)) {
    await logAction(bot, "–ø–æ–ø—ã—Ç–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–∏ –±–µ–∑ –ø—Ä–∞–≤", userId, {
      name:
        ctx.from.first_name && ctx.from.last_name
          ? `${ctx.from.first_name} ${ctx.from.last_name}`
          : ctx.from.first_name || ctx.from.username || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
      username: ctx.from.username,
      first_name: ctx.from.first_name,
      last_name: ctx.from.last_name,
    });
    return await ctx.reply("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", adminMenu());
  }
  return ctx.scene.enter("assignRole");
});
bot.hears(["üìã –ì—Ä–∞—Ñ–∏–∫: —Ç–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è", "üìã –ì—Ä–∞—Ñ–∏–∫: —Å–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è"], async (ctx) => {
  const userId = ctx.from.id.toString();
  const adminInfo = {
    name:
      ctx.from.first_name && ctx.from.last_name
        ? `${ctx.from.first_name} ${ctx.from.last_name}`
        : ctx.from.first_name || ctx.from.username || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
    username: ctx.from.username,
    first_name: ctx.from.first_name,
    last_name: ctx.from.last_name,
  };

  if (!ctx.state?.isAdmin) {
    await logAction(bot, "–ø–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –±–µ–∑ –ø—Ä–∞–≤", userId, adminInfo);
    return ctx.reply("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", getMainMenuInline(ctx.state.currentUser));
  }

  const nextWeek = ctx.message.text.includes("—Å–ª–µ–¥—É—é—â–∞—è");

  try {
    const text = await getAdminScheduleText(SPREADSHEET_ID, nextWeek);
    await ctx.reply(text, { parse_mode: "Markdown" });
  } catch (e) {
    await logError(bot, e, userId, adminInfo, `–ü—Ä–æ—Å–º–æ—Ç—Ä –≥—Ä–∞—Ñ–∏–∫–∞ ${nextWeek ? "—Å–ª–µ–¥—É—é—â–µ–π" : "—Ç–µ–∫—É—â–µ–π"} –Ω–µ–¥–µ–ª–∏`);
    await ctx.reply("‚ùó " + e.message, adminMenu());
  }
});

bot.on("callback_query", async (ctx) => {
  const data = ctx.callbackQuery.data;
  const userId = ctx.from.id.toString();
  ctx.session = ctx.session || {};
  await ensureRoleState(ctx);

  if (data.startsWith("branch:select_")) {
    const match = data.match(/^branch:select_(.+)$/);
    const branchId = match ? match[1] : null;
    const branch = BRANCHES.find((b) => b.id === branchId);
    if (!branch) {
      await ctx.answerCbQuery("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∏–ª–∏–∞–ª, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞");
      return;
    }

    const user = ctx.state?.currentUser || (await getUserById(userId));
    const userInfo = {
      name:
        user?.name ||
        (ctx.from.first_name && ctx.from.last_name
          ? `${ctx.from.first_name} ${ctx.from.last_name}`
          : ctx.from.first_name || ctx.from.username || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
      username: ctx.from.username,
      first_name: ctx.from.first_name,
      last_name: ctx.from.last_name,
    };

    await updateUserBranch(userId, branch.id);
    ctx.session.branchPromptShown = false;
    if (ctx.state) {
      ctx.state.currentUser = user ? { ...user, branch: branch.id } : null;
      ctx.state.isAdmin = computeAdminFlag(userId, ctx.state.currentUser);
      ctx.state.isManager = ctx.state.isAdmin || hasManagerRights(ctx.state.currentUser);
      ctx.state.isBranchManager = hasBranchManagerRights(ctx.state.currentUser);
    }

    await logAction(bot, "–í—ã–±–æ—Ä —Ñ–∏–ª–∏–∞–ª–∞", userId, userInfo, { branch: branch.id });

    await ctx.answerCbQuery("–§–∏–ª–∏–∞–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω");
    try {
      await ctx.editMessageText(`–§–∏–ª–∏–∞–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${branch.label}`);
    } catch (_) {}

    const displayName = user?.name || userInfo.name || "";

    if (user?.status === "approved") {
      await ctx.reply(`${displayName}, –í—ã —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –±–æ—Ç–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`, getMainMenuInline(ctx.state.currentUser));
    } else {
      await ctx.reply("–§–∏–ª–∏–∞–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.");
    }
    return;
  }

  if (
    data.startsWith("menu:") ||
    data.startsWith("report:") ||
    data.startsWith("schedule:") ||
    data.startsWith("support:") ||
    data.startsWith("links:") ||
    data.startsWith("training:")
  ) {
    if (data === "support:start") {
      ctx.session = ctx.session || {};
      ctx.session.supportChatActive = true;
      await ctx.editMessageText(
        "–í—ã –≤–æ—à–ª–∏ –≤ —Ä–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n–ù–∞–∂–º–∏—Ç–µ ¬´–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥¬ª —á—Ç–æ–±—ã –≤—ã–π—Ç–∏.",
        Markup.inlineKeyboard([[Markup.button.callback("‚úñÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥", "support:stop")], [Markup.button.callback("‚óÄÔ∏è –ù–∞–∑–∞–¥", "menu:main")]])
      );
      return;
    }
    if (data === "support:stop") {
      ctx.session = ctx.session || {};
      ctx.session.supportChatActive = false;
      await ctx.answerCbQuery("–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω");
      try {
        await ctx.editMessageText("–î–∏–∞–ª–æ–≥ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∑–∞–≤–µ—Ä—à—ë–Ω.", getMainMenuInline(ctx.state.currentUser));
      } catch (_) {}
      return;
    }
    if (data === "menu:main") {
      const userId = ctx.from.id.toString();
      const user = await getUserById(userId);
      await ctx.editMessageText(`${user?.name || ""}, –í—ã —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –±–æ—Ç–∞.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`, getMainMenuInline(user));
      return;
    }
    if (data === "menu:report") {
      if (!canAccessReports(ctx.state.currentUser)) {
        await ctx.answerCbQuery("–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤–∞—à–µ–π —Ä–æ–ª–∏");
        return;
      }
      await ctx.editMessageText(`–û—Ç—á–µ—Ç –ø–æ –≤–∞—à–µ–π –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç–µ.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`, getReportMenuInline());
      return;
    }
    if (data.startsWith("report:")) {
      if (!canAccessReports(ctx.state.currentUser)) {
        await ctx.answerCbQuery("–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤–∞—à–µ–π —Ä–æ–ª–∏");
        return;
      }
      const user = await getUserById(userId);
      const userInfo = {
        name: user?.name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
        username: user?.username,
        first_name: ctx.from.first_name,
        last_name: ctx.from.last_name,
      };

      await ctx.editMessageText("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Ç–∞–±–µ–ª—å...", getBackInlineMenu("menu:report"));
      let period = null;
      if (data === "report:today") period = "today";
      if (data === "report:yesterday") period = "yesterday";
      if (data === "report:week_current") period = "current_week";
      if (data === "report:week_prev") period = "last_week";
      if (data === "report:month_current") period = "current_month";
      if (data === "report:month_prev") period = "last_month";

      try {
        if (data === "report:custom") {
          await logTabReport(bot, userId, userInfo, "custom", { action: "–∑–∞–ø—Ä–æ—Å –≤–≤–æ–¥–∞ –ø–µ—Ä–∏–æ–¥–∞" });
          ctx.session = ctx.session || {};
          ctx.session.awaitingCustomReport = true;
          ctx.session.lastReportMsgId = ctx.callbackQuery.message.message_id;
          await ctx.editMessageText(
            "–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì-–î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01.07.2025-15.07.2025)",
            getBackInlineMenu("menu:report")
          );
        } else {
          await logTabReport(bot, userId, userInfo, period);
          const text = await sendReportText(userId, period);
          await ctx.editMessageText(text, { parse_mode: "HTML", ...getBackInlineMenu("menu:report") });
        }
      } catch (e) {
        await logError(bot, e, userId, userInfo, `–ó–∞–ø—Ä–æ—Å —Ç–∞–±–µ–ª—è –∑–∞ –ø–µ—Ä–∏–æ–¥: ${period}`);
        await ctx.editMessageText("‚ùó " + e.message, getBackInlineMenu("menu:report"));
      }
      return;
    }
    if (data === "menu:schedule") {
      await ctx.editMessageText(`–ü—Ä–æ—Å–º–æ—Ç—Ä –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`, getScheduleMenuInline(ctx.state.currentUser));
      return;
    }
    if (data === "schedule:branch") {
      await ensureRoleState(ctx);
      if (!hasBranchManagerRights(ctx.state.currentUser)) {
        await ctx.answerCbQuery("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤");
        return;
      }
      const branchId = ctx.state.currentUser?.branch;
      if (!branchId) {
        await ctx.answerCbQuery();
        await ctx.editMessageText("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∑–Ω–∞—á—å—Ç–µ —Ñ–∏–ª–∏–∞–ª, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –∫–æ–º–∞–Ω–¥—ã.", getBackInlineMenu("menu:schedule"));
        return;
      }
      const branchLabel = getBranchLabel(branchId);
      await ctx.editMessageText(
        `–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Ñ–∏–ª–∏–∞–ª–∞ ${branchLabel}:`,
        Markup.inlineKeyboard([
          [Markup.button.callback("–¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è", "schedule:branch_current")],
          [Markup.button.callback("–°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è", "schedule:branch_next")],
          [Markup.button.callback("‚óÄÔ∏è –ù–∞–∑–∞–¥", "menu:schedule")],
        ])
      );
      return;
    }
    if (data === "schedule:branch_current" || data === "schedule:branch_next") {
      await ensureRoleState(ctx);
      if (!hasBranchManagerRights(ctx.state.currentUser)) {
        await ctx.answerCbQuery("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤");
        return;
      }
      const branchId = ctx.state.currentUser?.branch;
      if (!branchId) {
        await ctx.answerCbQuery();
        await ctx.editMessageText("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∑–Ω–∞—á—å—Ç–µ —Ñ–∏–ª–∏–∞–ª, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –∫–æ–º–∞–Ω–¥—ã.", getBackInlineMenu("menu:schedule"));
        return;
      }
      const nextWeek = data.endsWith("next");
      const branchLabel = getBranchLabel(branchId);
      await ctx.answerCbQuery();
      await ctx.editMessageText("‚è≥ –ü–æ–ª—É—á–∞—é –≥—Ä–∞—Ñ–∏–∫ —Ñ–∏–ª–∏–∞–ª–∞...", getBackInlineMenu("menu:schedule"));
      try {
        await logScheduleAction(
          bot,
          userId,
          {
            name:
              ctx.state.currentUser?.name ||
              (ctx.from.first_name && ctx.from.last_name
                ? `${ctx.from.first_name} ${ctx.from.last_name}`
                : ctx.from.first_name || ctx.from.username || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
            username: ctx.from.username,
          },
          `–ø—Ä–æ—Å–º–æ—Ç—Ä –≥—Ä–∞—Ñ–∏–∫–∞ —Ñ–∏–ª–∏–∞–ª–∞ ${branchLabel}`,
          { branchId, nextWeek }
        );
        const scheduleText = await getBranchScheduleText(SPREADSHEET_ID, branchId, branchLabel, nextWeek);
        await ctx.editMessageText(scheduleText, {
          parse_mode: "Markdown",
          ...getBackInlineMenu("menu:schedule"),
        });
      } catch (e) {
        await ctx.editMessageText("‚ùó " + e.message, getBackInlineMenu("menu:schedule"));
      }
      return;
    }
    if (data === "menu:links" || data.startsWith("links:page_")) {
      try {
        const links = await getAllLinks();
        if (links.length === 0) {
          await ctx.editMessageText("–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Å—ã–ª–æ–∫.", getBackInlineMenu("menu:main"));
          return;
        }
        const page = data.startsWith("links:page_") ? parseInt(data.split("_")[1]) : 0;
        const itemsPerPage = 6;
        const isAdmin = ctx.state?.isAdmin ?? isAdminId(userId, ctx.state?.currentUser);

        const user = await getUserById(userId);
        const userInfo = {
          name: user?.name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
          username: user?.username,
          first_name: ctx.from.first_name,
          last_name: ctx.from.last_name,
        };

        await logAction(bot, `–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Å—ã–ª–æ–∫ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${page + 1})`, userId, userInfo, { page, isAdmin }, "–õ–æ–≥–∏");

        await ctx.editMessageText(
          "üîó –ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ –ø–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –í–∞–º –ø–æ–º–æ—á—å.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
          createPaginatedKeyboard(links, page, itemsPerPage, "links", isAdmin)
        );
      } catch (e) {
        await ctx.editMessageText("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Å—ã–ª–æ–∫: " + e.message, getBackInlineMenu("menu:main"));
      }
      return;
    }
    if (data === "links:add") {
      if (!ctx.state?.isAdmin) {
        await ctx.answerCbQuery("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤");
        return;
      }
      await ctx.answerCbQuery();
      return ctx.scene.enter("addLink");
    }
    if (data === "links:delete") {
      if (!ctx.state?.isAdmin) {
        await ctx.answerCbQuery("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤");
        return;
      }
      await ctx.answerCbQuery();
      return ctx.scene.enter("deleteLink");
    }
    if (data === "links:noop") {
      await ctx.answerCbQuery();
      return;
    }
    if (data === "menu:training" || data.startsWith("training:page_")) {
      try {
        const materials = await getAllTrainingMaterials();
        if (materials.length === 0) {
          await ctx.editMessageText("–ü–æ–∫–∞ –Ω–µ—Ç –æ–±—É—á–∞—é—â–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.", getBackInlineMenu("menu:main"));
          return;
        }
        const page = data.startsWith("training:page_") ? parseInt(data.split("_")[1]) : 0;
        const itemsPerPage = 6;
        const isAdmin = ctx.state?.isAdmin ?? isAdminId(userId, ctx.state?.currentUser);

        const user = await getUserById(userId);
        const userInfo = {
          name: user?.name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
          username: user?.username,
          first_name: ctx.from.first_name,
          last_name: ctx.from.last_name,
        };

        await logAction(bot, `–ü—Ä–æ—Å–º–æ—Ç—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –æ–±—É—á–µ–Ω–∏—è (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${page + 1})`, userId, userInfo, { page, isAdmin }, "–õ–æ–≥–∏");

        await ctx.editMessageText(
          "üìö –ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ –æ–±—É—á–∞—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –í–∞–º –ø–æ–ª–µ–∑–Ω—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
          createPaginatedKeyboard(materials, page, itemsPerPage, "training", isAdmin)
        );
      } catch (e) {
        await ctx.editMessageText("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: " + e.message, getBackInlineMenu("menu:main"));
      }
      return;
    }
    if (data === "training:add") {
      if (!ctx.state?.isAdmin) {
        await ctx.answerCbQuery("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤");
        return;
      }
      await ctx.answerCbQuery();
      return ctx.scene.enter("addTraining");
    }
    if (data === "training:delete") {
      if (!ctx.state?.isAdmin) {
        await ctx.answerCbQuery("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤");
        return;
      }
      await ctx.answerCbQuery();
      return ctx.scene.enter("deleteTraining");
    }
    if (data === "training:noop") {
      await ctx.answerCbQuery();
      return;
    }
    if (data.startsWith("training:view_")) {
      const matId = data.split("_")[1];
      try {
        const material = await getTrainingMaterialById(matId);
        if (!material) {
          await ctx.answerCbQuery("–ú–∞—Ç–µ—Ä–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω");
          return;
        }

        const user = await getUserById(userId);
        const userInfo = {
          name: user?.name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
          username: user?.username,
          first_name: ctx.from.first_name,
          last_name: ctx.from.last_name,
        };

        await logAction(bot, `–ü—Ä–æ—Å–º–æ—Ç—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è: ${material.title}`, userId, userInfo, { materialId: matId }, "–õ–æ–≥–∏");

        const text = `üìö *${material.title}*\n\n${material.content}`;

        if (material.media_type === "photo" && material.media_url) {
          // –î–ª—è —Ñ–æ—Ç–æ: —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
          try {
            await ctx.deleteMessage();
          } catch (err) {
            console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:", err.message);
          }
          await ctx.replyWithPhoto(material.media_url, {
            caption: text,
            parse_mode: "Markdown",
          });
        } else if (material.media_type === "link" && material.media_url) {
          // –î–ª—è —Å—Å—ã–ª–∫–∏: —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          const keyboard = [[Markup.button.url("üîó –û—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É", material.media_url)], [Markup.button.callback("‚óÄÔ∏è –ù–∞–∑–∞–¥", "menu:training")]];
          await ctx.editMessageText(text, {
            parse_mode: "Markdown",
            ...Markup.inlineKeyboard(keyboard),
          });
        } else {
          // –î–ª—è —Ç–µ–∫—Å—Ç–∞: —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          await ctx.editMessageText(text, {
            parse_mode: "Markdown",
            ...getBackInlineMenu("menu:training"),
          });
        }
      } catch (e) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞:", e);
        await ctx.answerCbQuery("–û—à–∏–±–∫–∞: " + e.message);
      }
      return;
    }
    if (data === "schedule:view:current" || data === "schedule:view:next") {
      await ensureRoleState(ctx);
      if (getUserRole(ctx.state.currentUser) === ROLES.LOGIST) {
        await ctx.answerCbQuery("–î–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≥—Ä–∞—Ñ–∏–∫ —Ñ–∏–ª–∏–∞–ª–∞");
        return;
      }
      const user = await getUserById(userId);
      const userInfo = {
        name: user?.name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
        username: user?.username,
        first_name: ctx.from.first_name,
        last_name: ctx.from.last_name,
      };
      const nextWeek = data.endsWith("next");

      await ctx.editMessageText("‚è≥ –ü–æ–ª—É—á–∞—é –≥—Ä–∞—Ñ–∏–∫...", getBackInlineMenu("menu:schedule"));
      try {
        await logScheduleAction(bot, userId, userInfo, `–ø—Ä–æ—Å–º–æ—Ç—Ä ${nextWeek ? "—Å–ª–µ–¥—É—é—â–µ–π" : "—Ç–µ–∫—É—â–µ–π"} –Ω–µ–¥–µ–ª–∏`);
        const grafText = await getScheduleText(SPREADSHEET_ID, userId, nextWeek);
        await ctx.editMessageText(grafText, { parse_mode: "Markdown", ...getBackInlineMenu("menu:schedule") });
      } catch (e) {
        await logError(bot, e, userId, userInfo, `–ü—Ä–æ—Å–º–æ—Ç—Ä –≥—Ä–∞—Ñ–∏–∫–∞ ${nextWeek ? "—Å–ª–µ–¥—É—é—â–µ–π" : "—Ç–µ–∫—É—â–µ–π"} –Ω–µ–¥–µ–ª–∏`);
        await ctx.editMessageText("‚ùó " + e.message, getBackInlineMenu("menu:schedule"));
      }
      return;
    }
    if (data === "schedule:view") {
      await ensureRoleState(ctx);
      if (getUserRole(ctx.state.currentUser) === ROLES.LOGIST) {
        await ctx.answerCbQuery("–î–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≥—Ä–∞—Ñ–∏–∫ —Ñ–∏–ª–∏–∞–ª–∞");
        return;
      }
      await ctx.editMessageText(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é:",
        Markup.inlineKeyboard([
          [Markup.button.callback("–¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è", "schedule:view:current")],
          [Markup.button.callback("–°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è", "schedule:view:next")],
          [Markup.button.callback("‚óÄÔ∏è –ù–∞–∑–∞–¥", "menu:schedule")],
        ])
      );
      return;
    }
    if (data === "schedule:send") {
      await ensureRoleState(ctx);
      if (getUserRole(ctx.state.currentUser) === ROLES.LOGIST) {
        await ctx.answerCbQuery("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤");
        return;
      }
      const { from, to } = getWeekBounds(true);
      const user = await getUserById(userId);
      const userInfo = {
        name: user?.name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
        username: user?.username,
        first_name: ctx.from.first_name,
        last_name: ctx.from.last_name,
      };
      if (!isScheduleSubmissionAllowed()) {
        await logScheduleAction(bot, userId, userInfo, "–ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –≤–Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏");
        await ctx.editMessageText("–ì—Ä–∞—Ñ–∏–∫ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Å 22:00 —á–µ—Ç–≤–µ—Ä–≥–∞ –∏ –¥–æ 12:00 –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è.", getBackInlineMenu("menu:schedule"));
        return;
      }
      await logScheduleAction(bot, userId, userInfo, "–∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –≥—Ä–∞—Ñ–∏–∫–∞", { period: `${from.format("DD.MM")}‚Äì${to.format("DD.MM")}` });
      const warn = `üìÖ –ü—Ä–∏—à–ª–∏—Ç–µ –≤–∞—à –≥—Ä–∞—Ñ–∏–∫ –Ω–∞ –ø–µ—Ä–∏–æ–¥ ${from.format("DD.MM")}‚Äì${to.format("DD.MM")} –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n–ü–Ω: 10-23\n–í—Ç: 10-23\n‚Ä¶`;
      await ctx.editMessageText(warn, getBackInlineMenu("menu:schedule"));
      ctx.session.awaitingSchedule = true;
      ctx.session.scheduleMode = "send";
      ctx.session.scheduleNextWeek = true;
      ctx.session.lastInlineMsgId = ctx.callbackQuery.message.message_id;
      return;
    }
  }

  const isAdminCtx = ctx.state?.isAdmin ?? false;
  const isBranchManagerCtx = hasBranchManagerRights(ctx.state?.currentUser);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∞–º–∏ –∏ –æ–±—É—á–µ–Ω–∏–µ–º (–∞–¥–º–∏–Ω)
  if (data === "admin:addLink") {
    if (!isAdminCtx) {
      await ctx.answerCbQuery("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤");
      return;
    }
    await ctx.answerCbQuery();
    return ctx.scene.enter("addLink");
  }
  if (data === "admin:deleteLink") {
    if (!isAdminCtx) {
      await ctx.answerCbQuery("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤");
      return;
    }
    await ctx.answerCbQuery();
    return ctx.scene.enter("deleteLink");
  }
  if (data === "admin:addTraining") {
    if (!isAdminCtx) {
      await ctx.answerCbQuery("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤");
      return;
    }
    await ctx.answerCbQuery();
    return ctx.scene.enter("addTraining");
  }
  if (data === "admin:deleteTraining") {
    if (!isAdminCtx) {
      await ctx.answerCbQuery("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤");
      return;
    }
    await ctx.answerCbQuery();
    return ctx.scene.enter("deleteTraining");
  }

  if (data.startsWith("support_reply:")) {
    if (!isAdminCtx) {
      await ctx.answerCbQuery("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤");
      return;
    }
    const targetId = data.split(":")[1];
    ctx.session = ctx.session || {};
    ctx.session.supportReplyTarget = targetId;
    await ctx.answerCbQuery();
    try {
      await ctx.deleteMessage();
    } catch (_) {}
    await ctx.reply(`–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –∫—É—Ä—å–µ—Ä–∞ (ID: ${targetId})`);
    ctx.session.awaitingSupportAdminReply = true;
    return;
  }
  if (data.startsWith("approve_") || data.startsWith("reject_")) {
    const idToChange = data.split("_")[1];
    const user = await getUserById(idToChange);
    const actingUser = ctx.state?.currentUser || (await getUserById(userId));
    const adminInfo = {
      name:
        ctx.from.first_name && ctx.from.last_name
          ? `${ctx.from.first_name} ${ctx.from.last_name}`
          : ctx.from.first_name || ctx.from.username || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
      username: ctx.from.username,
      first_name: ctx.from.first_name,
      last_name: ctx.from.last_name,
    };

    if (!user) {
      return await ctx.answerCbQuery("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }

    const isAdmin = isAdminCtx;
    const isBranchManager = hasBranchManagerRights(actingUser);

    if (!isAdmin && !isBranchManager) {
      await ctx.answerCbQuery("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤");
      return;
    }

    if (!isAdmin && isBranchManager) {
      const managerBranch = actingUser?.branch;
      if (!managerBranch) {
        await ctx.answerCbQuery("–ù–∞–∑–Ω–∞—á—å—Ç–µ —Ñ–∏–ª–∏–∞–ª, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–∞—è–≤–∫–∏");
        return;
      }
      if (user.branch && user.branch !== managerBranch) {
        await ctx.answerCbQuery("–≠—Ç–æ –∑–∞—è–≤–∫–∞ –¥—Ä—É–≥–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞");
        return;
      }
    }

    try {
      if (data.startsWith("approve_")) {
        await setUserStatus(idToChange, "approved");
        await logAuthAction(bot, idToChange, { name: user.name, username: user.username }, "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º", {
          adminId: userId,
          adminName: adminInfo.name,
        });

        await ctx.editMessageText(`‚úÖ –ö—É—Ä—å–µ—Ä ${user.name} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.`);
        await ctx.answerCbQuery("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω");

        try {
          await bot.telegram.sendMessage(
            idToChange,
            `–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!\n–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å :)\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
            getMainMenuInline(user)
          );
        } catch (err) {
          console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∫—É—Ä—å–µ—Ä—É ${idToChange}:`, err.message);
          await logError(bot, err, userId, adminInfo, "–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏");
        }
      }

      if (data.startsWith("reject_")) {
        await deleteUser(idToChange);
        await logAuthAction(bot, idToChange, { name: user.name, username: user.username }, "–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º", {
          adminId: userId,
          adminName: adminInfo.name,
        });

        await ctx.editMessageText(`‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç ${user.name} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.`);
        await ctx.answerCbQuery("–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞");

        try {
          await bot.telegram.sendMessage(idToChange, `‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.`);
        } catch (err) {
          console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–∞–∑–µ –∫—É—Ä—å–µ—Ä—É ${idToChange}:`, err.message);
          await logError(bot, err, userId, adminInfo, "–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–∫–∞–∑–µ");
        }
      }

      const pending = pendingApprovalNotifications.get(idToChange);
      if (pending && pending.length) {
        for (const note of pending) {
          if (!note || !note.chatId || !note.messageId) continue;
          try {
            await bot.telegram.deleteMessage(String(note.chatId), note.messageId);
          } catch (delErr) {
            if (delErr?.response?.error_code !== 400) {
              console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞—è–≤–∫–µ:", delErr.message);
            }
          }
        }
        pendingApprovalNotifications.delete(idToChange);
      }
    } catch (err) {
      await logError(bot, err, userId, adminInfo, "–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
      await ctx.answerCbQuery("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞");
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:", err.message);
    }

    return;
  }
  await ctx.answerCbQuery("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞");
});

bot.on("text", async (ctx) => {
  ctx.session = ctx.session || {};
  const userId = ctx.from.id.toString();

  if (ctx.session.awaitingCustomReport) {
    ctx.session.awaitingCustomReport = false;
    const input = ctx.message.text.trim();
    const user = await getUserById(userId);
    const userInfo = {
      name: user?.name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
      username: user?.username,
      first_name: ctx.from.first_name,
      last_name: ctx.from.last_name,
    };

    try {
      await logTabReport(bot, userId, userInfo, "custom", { customPeriod: input });
      const text = await sendReportText(userId, "custom", input);
      const msgId = ctx.session.lastReportMsgId;
      if (msgId) {
        await ctx.telegram.editMessageText(ctx.chat.id, msgId, null, text, { parse_mode: "HTML", ...getBackInlineMenu("menu:report") });
      } else {
        await ctx.reply(text, { parse_mode: "HTML", ...getReportMenuInline() });
      }
    } catch (e) {
      await logError(bot, e, userId, userInfo, `–ó–∞–ø—Ä–æ—Å –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ç–∞–±–µ–ª—è –∑–∞ –ø–µ—Ä–∏–æ–¥: ${input}`);
      const msgId = ctx.session.lastReportMsgId;
      if (msgId) {
        await ctx.telegram.editMessageText(ctx.chat.id, msgId, null, "‚ùó " + e.message, getBackInlineMenu("menu:report"));
      } else {
        await ctx.reply("‚ùó " + e.message, getReportMenuInline());
      }
    }
    return;
  }

  if (ctx.session.awaitingSupportMessage || ctx.session.supportChatActive) {
    const text = ctx.message.text?.trim();
    const user = await getUserById(userId);
    const userInfo = {
      name: user?.name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
      username: user?.username,
      first_name: ctx.from.first_name,
      last_name: ctx.from.last_name,
    };

    if (!text) {
      await logAction(bot, "–ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—É—Å—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", userId, userInfo);
      return ctx.reply("–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –û—Ç–º–µ–Ω–∞.", getMainMenuInline(ctx.state.currentUser));
    }

    try {
      await logMessageSent(bot, userId, userInfo, "—Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", {
        messageLength: text.length,
        supportChatActive: ctx.session.supportChatActive,
      });

      for (const admin of ADMIN_IDS) {
        try {
          await bot.telegram.sendMessage(
            admin,
            `üì• –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç –∫—É—Ä—å–µ—Ä–∞:\n` + `üë§ ${user ? user.name : userId} (ID: ${userId})\n\n` + `${text}`,
            Markup.inlineKeyboard([[Markup.button.callback(`‚úçÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å ${user ? user.name : userId}`, `support_reply:${userId}`)]])
          );
        } catch (e) {
          console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É", admin, e.message);
          await logError(bot, e, userId, userInfo, "–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É");
        }
      }
      if (!ctx.session.supportChatActive) {
        await ctx.reply("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç.");
      }
    } catch (e) {
      await logError(bot, e, userId, userInfo, "–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É");
      await ctx.reply("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
    return;
  }

  if (ctx.session.awaitingSchedule && ctx.session.scheduleMode === "send") {
    ctx.session.awaitingSchedule = false;
    const user = await getUserById(userId);
    const userInfo = {
      name: user?.name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
      username: user?.username,
      first_name: ctx.from.first_name,
      last_name: ctx.from.last_name,
    };

    try {
      await logScheduleAction(bot, userId, userInfo, "–æ—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞", {
        scheduleText: ctx.message.text.trim().substring(0, 100) + (ctx.message.text.trim().length > 100 ? "..." : ""),
      });

      ctx.session.currentSheet = await ensureWeekSheetAndAsk(SPREADSHEET_ID, ctx.chat.id, ctx.telegram, false, !!ctx.session.scheduleNextWeek);
      await parseAndAppend(SPREADSHEET_ID, ctx.session.currentSheet, ctx.message.text.trim(), userId);
      await ctx.telegram.editMessageText(
        ctx.chat.id,
        ctx.session.lastInlineMsgId,
        null,
        "‚úÖ –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!",
        getScheduleMenuInline(ctx.state.currentUser)
      );
    } catch (e) {
      await logError(bot, e, userId, userInfo, "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞");
      await ctx.telegram.editMessageText(
        ctx.chat.id,
        ctx.session.lastInlineMsgId,
        null,
        "‚ùó " + e.message,
        getScheduleMenuInline(ctx.state.currentUser)
      );
    }
    return;
  }
  if (ctx.session.awaitingSchedule && ctx.session.scheduleMode === "edit") {
    ctx.session.awaitingSchedule = false;
    const user = await getUserById(userId);
    const userInfo = {
      name: user?.name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
      username: user?.username,
      first_name: ctx.from.first_name,
      last_name: ctx.from.last_name,
    };

    try {
      await logScheduleAction(bot, userId, userInfo, "—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞", {
        scheduleText: ctx.message.text.trim().substring(0, 100) + (ctx.message.text.trim().length > 100 ? "..." : ""),
      });

      ctx.session.currentSheet = await ensureWeekSheetAndAsk(SPREADSHEET_ID, ctx.chat.id, ctx.telegram, false, !!ctx.session.scheduleNextWeek);
      await upsertSchedule(SPREADSHEET_ID, ctx.session.currentSheet, ctx.message.text.trim(), userId, ctx.telegram);
      await ctx.telegram.editMessageText(
        ctx.chat.id,
        ctx.session.lastInlineMsgId,
        null,
        "‚úÖ –ì—Ä–∞—Ñ–∏–∫ –æ–±–Ω–æ–≤–ª—ë–Ω!",
        getScheduleMenuInline(ctx.state.currentUser)
      );
    } catch (e) {
      await logError(bot, e, userId, userInfo, "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞");
      await ctx.telegram.editMessageText(
        ctx.chat.id,
        ctx.session.lastInlineMsgId,
        null,
        "‚ùó " + e.message,
        getScheduleMenuInline(ctx.state.currentUser)
      );
    }
    return;
  }

  if (ctx.session.awaitingSupportAdminReply) {
    const targetId = ctx.session.supportReplyTarget;
    ctx.session.awaitingSupportAdminReply = false;
    ctx.session.supportReplyTarget = null;
    const replyText = ctx.message.text?.trim();
    const adminInfo = {
      name:
        ctx.from.first_name && ctx.from.last_name
          ? `${ctx.from.first_name} ${ctx.from.last_name}`
          : ctx.from.first_name || ctx.from.username || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
      username: ctx.from.username,
      first_name: ctx.from.first_name,
      last_name: ctx.from.last_name,
    };

    if (!replyText) {
      return ctx.reply("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç. –û—Ç–º–µ–Ω–µ–Ω–æ.", adminMenu());
    }

    try {
      await bot.telegram.sendMessage(String(targetId), `‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n${replyText}`);
      await ctx.reply("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.", adminMenu());
    } catch (e) {
      await logError(bot, e, userId, adminInfo, "–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É");
      await ctx.reply("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.", adminMenu());
    }
    return;
  }
});

async function sendReportText(userId, period, customRangeInput) {
  const user = await getUserById(userId);
  if (!user || user.status !== "approved") {
    return "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é /start";
  }
  const fullName = user.name.trim().toLowerCase();
  const auth = new google.auth.GoogleAuth({
    keyFile: "creds.json",
    scopes: ["https://www.googleapis.com/auth/spreadsheets.readonly"],
  });
  const client = await auth.getClient();
  const sheets = google.sheets({ version: "v4", auth: client });

  const sheetNames = ["–°—É—Ä–≥—É—Ç 1 (30 –ª–µ—Ç –ø–æ–±–µ–¥—ã)", "–°—É—Ä–≥—É—Ç 2 (–£—Å–æ–ª—å—Ü–µ–≤–∞)", "–°—É—Ä–≥—É—Ç 3 (–ú–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω–∞—è)"];

  let allRows = [];
  for (const sheetName of sheetNames) {
    const res = await sheets.spreadsheets.values.get({
      spreadsheetId: process.env.SHEET_ID,
      range: `${sheetName}!A2:Z`,
    });
    if (res.data.values) allRows.push(...res.data.values);
  }
  const rows = allRows;

  function parseDate(str) {
    if (!str || typeof str !== "string" || !str.includes(".")) return null;
    const [day, month, year] = str.split(".");
    return new Date(`${month}/${day}/${year}`);
  }
  function getPreviousWeekRange() {
    const now = new Date();
    const day = now.getDay();
    const currentMonday = new Date(now);
    currentMonday.setDate(now.getDate() - ((day + 6) % 7));
    const lastMonday = new Date(currentMonday);
    lastMonday.setDate(currentMonday.getDate() - 7);
    const lastSunday = new Date(lastMonday);
    lastSunday.setDate(lastMonday.getDate() + 6);
    lastMonday.setHours(0, 0, 0, 0);
    lastSunday.setHours(23, 59, 59, 999);
    return { fromDate: lastMonday, toDate: lastSunday };
  }
  function getCurrentWeekRange() {
    const now = new Date();
    const day = now.getDay();
    const diffToMonday = (day + 6) % 7;
    const monday = new Date(now);
    monday.setDate(now.getDate() - diffToMonday);
    monday.setHours(0, 0, 0, 0);
    const sunday = new Date(monday);
    sunday.setDate(monday.getDate() + 6);
    sunday.setHours(23, 59, 59, 999);
    return { fromDate: monday, toDate: sunday };
  }

  if (period === "today" || period === "yesterday") {
    const today = new Date();
    const target = new Date(today);
    if (period === "yesterday") target.setDate(today.getDate() - 1);
    const targetStr = target.toLocaleDateString("ru-RU");

    const match = rows.find((r) => {
      const rowName = r[2]?.trim().toLowerCase();
      const rowDateStr = r[1];
      const rowDate = parseDate(rowDateStr);
      return rowName === fullName && rowDate?.toLocaleDateString("ru-RU") === targetStr;
    });
    if (!match) {
      return `–î–∞–Ω–Ω—ã—Ö –∑–∞ ${period === "today" ? "—Å–µ–≥–æ–¥–Ω—è" : "–≤—á–µ—Ä–∞"} –Ω–µ—Ç.`;
    }
    const [, date, , , , , , hours, km, orders, , , , times, nps, , , , , , , zaezd1, zaezd2, salary] = match;
    const totalZaezd = parseFloat(zaezd1 || 0) + parseFloat(zaezd2 || 0);
    return (
      `<b>üìÖ ${escapeHtml(date)}</b>\n` +
      `üë§ <b>${escapeHtml(user.name)}</b>\n\n` +
      `‚Ä¢ –û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ: <b>${escapeHtml(hours)}</b>\n` +
      `‚Ä¢ –ü—Ä–æ–±–µ–≥: <b>${escapeHtml(km)}</b> –∫–º\n` +
      `‚Ä¢ –ó–∞–∫–∞–∑—ã: <b>${escapeHtml(orders)}</b>\n` +
      `‚Ä¢ –ó–∞–µ–∑–¥—ã: <b>${escapeHtml(totalZaezd)}</b>\n` +
      `‚Ä¢ –°—É–º–º–∞: <b>${escapeHtml(salary)}</b> ‚ÇΩ`
    );
  }
  if (period === "last_week") {
    const { fromDate, toDate } = getPreviousWeekRange();
    const filtered = rows.filter((r) => {
      const rowName = r[2]?.trim().toLowerCase();
      const rowDateStr = r[1];
      const rowDate = parseDate(rowDateStr);
      return rowName === fullName && rowDate && rowDate >= fromDate && rowDate <= toDate;
    });
    if (filtered.length === 0) {
      return `–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø—Ä–æ—à–ª—É—é –Ω–µ–¥–µ–ª—é ` + `(${fromDate.toLocaleDateString("ru-RU")} - ${toDate.toLocaleDateString("ru-RU")})`;
    }
    let totalHours = 0,
      totalKm = 0,
      totalOrders = 0,
      totalSalary = 0,
      totalZaezdy = 0;
    let times = "",
      rating = "";
    let message =
      `<b>üìÖ –¢–∞–±–µ–ª—å –∑–∞ –ø—Ä–æ—à–ª—É—é –Ω–µ–¥–µ–ª—é</b>\n` +
      `–ü–µ—Ä–∏–æ–¥: <b>${fromDate.toLocaleDateString("ru-RU")} ‚Äì ${toDate.toLocaleDateString("ru-RU")}</b>\n` +
      `üë§ <b>${escapeHtml(user.name)}</b>`;
    for (const r of filtered) {
      const [, date, , , , , , hours, km, orders, , , , time, nps, , , , , , , zaezd1, zaezd2, salary] = r;
      const totalZaezd = parseFloat(zaezd1 || 0) + parseFloat(zaezd2 || 0);
      message +=
        `\n\nüìÜ <b>${escapeHtml(date)}</b>\n` +
        `‚Ä¢ –û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ: <b>${escapeHtml(hours)}</b> —á\n` +
        `‚Ä¢ –ü—Ä–æ–±–µ–≥: <b>${escapeHtml(km)}</b> –∫–º\n` +
        `‚Ä¢ –ó–∞–∫–∞–∑—ã: <b>${escapeHtml(orders)}</b>\n` +
        `‚Ä¢ –ó–∞–µ–∑–¥—ã: <b>${escapeHtml(totalZaezd)}</b>\n` +
        `‚Ä¢ –°—É–º–º–∞: <b>${escapeHtml(salary)}</b> ‚ÇΩ`;
      totalHours += parseFloat(hours || 0);
      totalKm += parseFloat(km || 0);
      totalOrders += parseInt(orders || 0);
      totalSalary += parseFloat(salary || 0);
      totalZaezdy += totalZaezd;
      times = time;
      rating = nps;
    }
    message +=
      `\n\n<b>–ò–¢–û–ì–û</b>\n` +
      `‚Ä¢ –û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ: <b>${escapeHtml(totalHours)}</b> —á\n` +
      `‚Ä¢ –ü—Ä–æ–±–µ–≥: <b>${escapeHtml(totalKm)}</b> –∫–º\n` +
      `‚Ä¢ –ó–∞–∫–∞–∑–æ–≤: <b>${escapeHtml(totalOrders)}</b>\n` +
      `‚Ä¢ –ó–∞–µ–∑–¥—ã: <b>${escapeHtml(totalZaezdy)}</b>\n` +
      `‚Ä¢ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: <b>${escapeHtml(totalSalary.toFixed(2))}</b> ‚ÇΩ\n` +
      `‚Ä¢ –†–µ–π—Ç–∏–Ω–≥: <b>${escapeHtml(rating)}</b>\n` +
      `‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: <b>${escapeHtml(times)}</b> –º–∏–Ω`;
    return message;
  }
  if (period === "current_week") {
    const { fromDate, toDate } = getCurrentWeekRange();
    const filtered = rows.filter((r) => {
      const rowName = r[2]?.trim().toLowerCase();
      const rowDate = parseDate(r[1]);
      return rowName === fullName && rowDate && rowDate >= fromDate && rowDate <= toDate;
    });
    if (filtered.length === 0) {
      return `–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é ` + `(${fromDate.toLocaleDateString("ru-RU")} - ${toDate.toLocaleDateString("ru-RU")})`;
    }
    let totalHours = 0,
      totalKm = 0,
      totalOrders = 0,
      totalSalary = 0,
      totalZaezdy = 0;
    let lastTime = "",
      lastRating = "";
    let message =
      `<b>üìÖ –¢–∞–±–µ–ª—å –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é</b>\n` +
      `–ü–µ—Ä–∏–æ–¥: <b>${fromDate.toLocaleDateString("ru-RU")} ‚Äì ${toDate.toLocaleDateString("ru-RU")}</b>\n` +
      `üë§ <b>${escapeHtml(user.name)}</b>`;
    for (const r of filtered) {
      const [, date, , , , , , hours, km, orders, , , , time, nps, , , , , , , zaezd1, zaezd2, salary] = r;
      const zaezdy = parseFloat(zaezd1 || 0) + parseFloat(zaezd2 || 0);
      message +=
        `\n\nüìÜ <b>${escapeHtml(date)}</b>\n` +
        `‚Ä¢ –û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ: <b>${escapeHtml(hours)}</b> —á\n` +
        `‚Ä¢ –ü—Ä–æ–±–µ–≥: <b>${escapeHtml(km)}</b> –∫–º\n` +
        `‚Ä¢ –ó–∞–∫–∞–∑—ã: <b>${escapeHtml(orders)}</b>\n` +
        `‚Ä¢ –ó–∞–µ–∑–¥—ã: <b>${escapeHtml(zaezdy)}</b>\n` +
        `‚Ä¢ –°—É–º–º–∞: <b>${escapeHtml(salary)}</b> ‚ÇΩ`;
      totalHours += parseFloat(hours || 0);
      totalKm += parseFloat(km || 0);
      totalOrders += parseInt(orders || 0, 10);
      totalSalary += parseFloat(salary || 0);
      totalZaezdy += zaezdy;
      lastTime = time;
      lastRating = nps;
    }
    message +=
      `\n\n<b>–ò–¢–û–ì–û</b>\n` +
      `‚Ä¢ –û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ: <b>${escapeHtml(totalHours)}</b> —á\n` +
      `‚Ä¢ –ü—Ä–æ–±–µ–≥: <b>${escapeHtml(totalKm)}</b> –∫–º\n` +
      `‚Ä¢ –ó–∞–∫–∞–∑–æ–≤: <b>${escapeHtml(totalOrders)}</b>\n` +
      `‚Ä¢ –ó–∞–µ–∑–¥—ã: <b>${escapeHtml(totalZaezdy)}</b>\n` +
      `‚Ä¢ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: <b>${escapeHtml(totalSalary.toFixed(2))}</b> ‚ÇΩ\n` +
      `‚Ä¢ –†–µ–π—Ç–∏–Ω–≥: <b>${escapeHtml(lastRating)}</b>\n` +
      `‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: <b>${escapeHtml(lastTime)}</b> –º–∏–Ω`;
    return message;
  }
  if (period === "current_month" || period === "last_month") {
    const now = new Date();
    let fromDate, toDate;
    if (period === "current_month") {
      fromDate = new Date(now.getFullYear(), now.getMonth(), 1);
      toDate = new Date(now.getFullYear(), now.getMonth() + 1, 0);
    } else {
      fromDate = new Date(now.getFullYear(), now.getMonth() - 1, 1);
      toDate = new Date(now.getFullYear(), now.getMonth(), 0);
    }
    fromDate.setHours(0, 0, 0, 0);
    toDate.setHours(23, 59, 59, 999);
    const daysInRange = Math.floor((toDate - fromDate) / (24 * 60 * 60 * 1000)) + 1;
    const summarizeOnly = daysInRange > 7;

    const filtered = rows.filter((r) => {
      const rowName = r[2]?.trim().toLowerCase();
      const rowDate = parseDate(r[1]);
      return rowName === fullName && rowDate && rowDate >= fromDate && rowDate <= toDate;
    });
    if (filtered.length === 0) {
      return `–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥ ` + `(${fromDate.toLocaleDateString("ru-RU")} - ${toDate.toLocaleDateString("ru-RU")})`;
    }
    let totalHours = 0,
      totalKm = 0,
      totalOrders = 0,
      totalSalary = 0,
      totalZaezdy = 0;
    let lastTime = "",
      lastRating = "";
    let message =
      `<b>üìÖ –¢–∞–±–µ–ª—å –∑–∞ –ø–µ—Ä–∏–æ–¥</b>\n` +
      `–ü–µ—Ä–∏–æ–¥: <b>${fromDate.toLocaleDateString("ru-RU")} ‚Äì ${toDate.toLocaleDateString("ru-RU")}</b>\n` +
      `üë§ <b>${escapeHtml(user.name)}</b>`;
    for (const r of filtered) {
      const [, date, , , , , , hours, km, orders, , , , time, nps, , , , , , , zaezd1, zaezd2, salary] = r;
      const zaezdy = parseFloat(zaezd1 || 0) + parseFloat(zaezd2 || 0);
      if (!summarizeOnly) {
        message +=
          `\n\nüìÜ <b>${escapeHtml(date)}</b>\n` +
          `‚Ä¢ –û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ: <b>${escapeHtml(hours)}</b> —á\n` +
          `‚Ä¢ –ü—Ä–æ–±–µ–≥: <b>${escapeHtml(km)}</b> –∫–º\n` +
          `‚Ä¢ –ó–∞–∫–∞–∑—ã: <b>${escapeHtml(orders)}</b>\n` +
          `‚Ä¢ –ó–∞–µ–∑–¥—ã: <b>${escapeHtml(zaezdy)}</b>\n` +
          `‚Ä¢ –°—É–º–º–∞: <b>${escapeHtml(salary)}</b> ‚ÇΩ`;
      }
      totalHours += parseFloat(hours || 0);
      totalKm += parseFloat(km || 0);
      totalOrders += parseInt(orders || 0, 10);
      totalSalary += parseFloat(salary || 0);
      totalZaezdy += zaezdy;
      lastTime = time;
      lastRating = nps;
    }
    message +=
      `\n\n<b>–ò–¢–û–ì–û</b>\n` +
      `‚Ä¢ –û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ: <b>${escapeHtml(totalHours)}</b> —á\n` +
      `‚Ä¢ –ü—Ä–æ–±–µ–≥: <b>${escapeHtml(totalKm)}</b> –∫–º\n` +
      `‚Ä¢ –ó–∞–∫–∞–∑–æ–≤: <b>${escapeHtml(totalOrders)}</b>\n` +
      `‚Ä¢ –ó–∞–µ–∑–¥—ã: <b>${escapeHtml(totalZaezdy)}</b>\n` +
      `‚Ä¢ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: <b>${escapeHtml(totalSalary.toFixed(2))}</b> ‚ÇΩ\n` +
      `‚Ä¢ –†–µ–π—Ç–∏–Ω–≥: <b>${escapeHtml(lastRating)}</b>\n` +
      `‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: <b>${escapeHtml(lastTime)}</b> –º–∏–Ω`;
    return message;
  }
  if (period === "custom") {
    if (!customRangeInput || !/\d{2}\.\d{2}\.\d{4}-\d{2}\.\d{2}\.\d{4}/.test(customRangeInput)) {
      throw new Error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì-–î–î.–ú–ú.–ì–ì–ì–ì");
    }
    const [fromStr, toStr] = customRangeInput.split("-");
    const fromDate = parseDate(fromStr);
    const toDate = parseDate(toStr);
    if (!fromDate || !toDate || fromDate > toDate) {
      throw new Error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞—Ç—ã –≤ –ø–µ—Ä–∏–æ–¥–µ");
    }
    fromDate.setHours(0, 0, 0, 0);
    toDate.setHours(23, 59, 59, 999);
    const daysInRange = Math.floor((toDate - fromDate) / (24 * 60 * 60 * 1000)) + 1;
    const summarizeOnly = daysInRange > 7;
    const filtered = rows.filter((r) => {
      const rowName = r[2]?.trim().toLowerCase();
      const rowDate = parseDate(r[1]);
      return rowName === fullName && rowDate && rowDate >= fromDate && rowDate <= toDate;
    });
    if (filtered.length === 0) {
      return `–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥ ` + `(${fromDate.toLocaleDateString("ru-RU")} - ${toDate.toLocaleDateString("ru-RU")})`;
    }
    let totalHours = 0,
      totalKm = 0,
      totalOrders = 0,
      totalSalary = 0,
      totalZaezdy = 0;
    let lastTime = "",
      lastRating = "";
    let message = `üìÖ –¢–∞–±–µ–ª—å –∑–∞ –ø–µ—Ä–∏–æ–¥ ` + `(${fromDate.toLocaleDateString("ru-RU")} - ${toDate.toLocaleDateString("ru-RU")})\n` + `üë§ ${user.name}`;
    for (const r of filtered) {
      const [, date, , , , , , hours, km, orders, , , , time, nps, , , , , , , zaezd1, zaezd2, salary] = r;
      const zaezdy = parseFloat(zaezd1 || 0) + parseFloat(zaezd2 || 0);
      if (!summarizeOnly) {
        message +=
          `\n\nüìÜ ${date}:\n` +
          `–û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ: ${hours} —á\n` +
          `–ü—Ä–æ–±–µ–≥: ${km} –∫–º\n` +
          `–ó–∞–∫–∞–∑—ã: ${orders}\n` +
          `–ó–∞–µ–∑–¥—ã: ${zaezdy}\n` +
          `–°—É–º–º–∞: ${salary} ‚ÇΩ`;
      }
      totalHours += parseFloat(hours || 0);
      totalKm += parseFloat(km || 0);
      totalOrders += parseInt(orders || 0, 10);
      totalSalary += parseFloat(salary || 0);
      totalZaezdy += zaezdy;
      lastTime = time;
      lastRating = nps;
    }
    message +=
      `\n\n–ò–¢–û–ì–û:\n` +
      `–û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ: ${totalHours} —á\n` +
      `–ü—Ä–æ–±–µ–≥: ${totalKm} –∫–º\n` +
      `–ó–∞–∫–∞–∑–æ–≤: ${totalOrders}\n` +
      `–ó–∞–µ–∑–¥—ã: ${totalZaezdy}\n` +
      `–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${totalSalary.toFixed(2)} ‚ÇΩ\n` +
      `–†–µ–π—Ç–∏–Ω–≥: ${lastRating}\n` +
      `–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: ${lastTime} –º–∏–Ω`;
    return message;
  }
  return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.";
}

bot.catch(async (err, ctx) => {
  const userId = ctx.from?.id || "unknown";
  const userInfo = {
    name:
      ctx.from?.first_name && ctx.from?.last_name
        ? `${ctx.from.first_name} ${ctx.from.last_name}`
        : ctx.from?.first_name || ctx.from?.username || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
    username: ctx.from?.username,
    first_name: ctx.from?.first_name,
    last_name: ctx.from?.last_name,
  };

  await logError(bot, err, userId, userInfo, "–ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –±–æ—Ç–∞");
  await ctx.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", getMainMenuInline(ctx.state?.currentUser));
});

initSchema()
  .then(async () => {
    try {
      await bot.launch();
    } catch (launchErr) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:", launchErr.message);
    }

    try {
      await notifyUsersWithoutBranch();
    } catch (notifyErr) {
      console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤—ã–±–æ—Ä–µ —Ñ–∏–ª–∏–∞–ª–∞:", notifyErr.message);
    }
  })
  .catch((err) => {
    console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ö–µ–º—É:", err.message);
    process.exit(1);
  });

process.once("SIGINT", () => {
  bot.stop("SIGINT");
  process.exit();
});

process.once("SIGTERM", () => {
  bot.stop("SIGTERM");
  process.exit();
});
