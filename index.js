require("dotenv").config();
const { Telegraf, Scenes, Markup, session } = require("telegraf");
const fs = require("fs");
const { google } = require("googleapis");
const moment = require("moment-timezone");
const cron = require("node-cron");

const { ensureWeekSheetAndAsk, upsertSchedule, getScheduleText, parseAndAppend, isScheduleSubmissionAllowed, getWeekBounds } = require("./grafik.js");

// ==================== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ====================
const bot = new Telegraf(process.env.BOT_TOKEN);
const ADMIN_ID = process.env.ADMIN_ID;
const SPREADSHEET_ID = process.env.GRAFIK;

// ==================== –†–∞–±–æ—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ ====================
let users = fs.existsSync("users.json") ? JSON.parse(fs.readFileSync("users.json")) : {};

function saveUsers() {
  fs.writeFileSync("users.json", JSON.stringify(users, null, 2));
}

// ==================== Google Sheets ====================
const auth = new google.auth.GoogleAuth({
  keyFile: "creds.json",
  scopes: ["https://www.googleapis.com/auth/spreadsheets.readonly"],
});

// ==================== –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–∞–º–∏ ====================
function getPreviousWeekRange() {
  const now = new Date();
  const day = now.getDay();
  const currentMonday = new Date(now);
  currentMonday.setDate(now.getDate() - ((day + 6) % 7));
  const lastMonday = new Date(currentMonday);
  lastMonday.setDate(currentMonday.getDate() - 7);
  const lastSunday = new Date(lastMonday);
  lastSunday.setDate(lastMonday.getDate() + 6);
  lastMonday.setHours(0, 0, 0, 0);
  lastSunday.setHours(23, 59, 59, 999);
  return { fromDate: lastMonday, toDate: lastSunday };
}

cron.schedule("0 12 * * 5", async () => {
  const now = moment().tz("Asia/Yekaterinburg");
  console.log(`[–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ] –†–∞—Å—Å—ã–ª–∞—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ ${now.format("YYYY-MM-DD HH:mm")}`);
  for (const [userId, user] of Object.entries(users)) {
    if (user.status === "approved") {
      try {
        await bot.telegram.sendMessage(
          userId,
          "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–µ–º! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –≥—Ä–∞—Ñ–∏–∫ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫¬ª –≤ –º–µ–Ω—é."
        );
      } catch (e) {
        console.error(`[–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ] –û—à–∏–±–∫–∞ –¥–ª—è ${userId}:`, e.message);
      }
    }
  }
});

function getCurrentWeekRange() {
  const now = new Date();
  const day = now.getDay(); // 0 (–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ) ‚Ä¶ 6 (—Å—É–±–±–æ—Ç–∞)

  const diffToMonday = (day + 6) % 7;

  const monday = new Date(now);
  monday.setDate(now.getDate() - diffToMonday);
  monday.setHours(0, 0, 0, 0);

  const sunday = new Date(monday);
  sunday.setDate(monday.getDate() + 6);
  sunday.setHours(23, 59, 59, 999);

  return { fromDate: monday, toDate: sunday };
}

function parseDate(str) {
  if (!str || typeof str !== "string" || !str.includes(".")) {
    return null;
  }
  const [day, month, year] = str.split(".");
  return new Date(`${month}/${day}/${year}`);
}

// ==================== –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ====================
// ========== INLINE MENU GENERATORS ==========

function getMainMenuInline() {
  return Markup.inlineKeyboard([
    [Markup.button.callback('üìÖ –¢–∞–±–µ–ª—å', 'menu:report')],
    [Markup.button.callback('üìä –ì—Ä–∞—Ñ–∏–∫', 'menu:schedule')],
  ]);
}

function getReportMenuInline() {
  return Markup.inlineKeyboard([
    [Markup.button.callback('üìÖ –ó–∞ —Å–µ–≥–æ–¥–Ω—è', 'report:today')],
    [Markup.button.callback('üìÜ –ó–∞ –≤—á–µ—Ä–∞', 'report:yesterday')],
    [Markup.button.callback('üìä –¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è', 'report:week_current')],
    [Markup.button.callback('üìä –ü—Ä–æ—à–ª–∞—è –Ω–µ–¥–µ–ª—è', 'report:week_prev')],
    [Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'menu:main')],
  ]);
}

function getScheduleMenuInline() {
  return Markup.inlineKeyboard([
    [Markup.button.callback('üëÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥—Ä–∞—Ñ–∏–∫', 'schedule:view')],
    [Markup.button.callback('‚ûï –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫', 'schedule:send')],
    [Markup.button.callback('üõ† –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫', 'schedule:edit')],
    [Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'menu:main')],
  ]);
}
function getBackInlineMenu(callbackBack) {
  return Markup.inlineKeyboard([
    [Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', callbackBack)]
  ]);
}


// ==================== –ê–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é ====================
function adminMenu() {
  return Markup.keyboard([
    ["üë• –°–ø–∏—Å–æ–∫ –∫—É—Ä—å–µ—Ä–æ–≤", "‚ùå –£–¥–∞–ª–∏—Ç—å –∫—É—Ä—å–µ—Ä–∞"],
  ]).resize();
}

// ==================== –°—Ü–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ====================
const registrationScene = new Scenes.BaseScene("registration");

registrationScene.enter(async (ctx) => {
  const userId = ctx.from.id.toString();
  await ctx.reply("üëã –ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –§–ò–û –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", Markup.removeKeyboard());
});

registrationScene.on("text", async (ctx) => {
  const userId = ctx.from.id.toString();
  const name = ctx.message.text.trim();

  if (!name || name.length < 3) {
    return await ctx.reply("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –§–ò–û (–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞)");
  }

  users[userId] = { name, status: "pending" };
  saveUsers();

  try {
    const userInfo = ctx.from;
    const username = userInfo.username ? `@${userInfo.username}` : "–Ω–µ —É–∫–∞–∑–∞–Ω";
    const fullTelegramName = `${userInfo.first_name || ""} ${userInfo.last_name || ""}`.trim();

    await bot.telegram.sendMessage(
      ADMIN_ID,
      `üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:\n` +
        `üë§ –í–≤–µ–¥—ë–Ω–Ω–æ–µ –§–ò–û: ${name}\n` +
        `üîπ Telegram: ${fullTelegramName} (${username})\n` +
        `üÜî Telegram ID: ${userId}`,
      Markup.inlineKeyboard([
        Markup.button.callback(`‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å`, `approve_${userId}`),
        Markup.button.callback(`‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å`, `reject_${userId}`),
      ])
    );

    await ctx.reply("‚è≥ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.");
    await ctx.scene.leave();
  } catch (err) {
    return await ctx.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
});

registrationScene.on("message", async (ctx) => {
  await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç");
});

// ==================== –°—Ü–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫—É—Ä—å–µ—Ä–∞ ====================
const deleteCourierScene = new Scenes.BaseScene("deleteCourier");

deleteCourierScene.enter(async (ctx) => {
  try {
    console.log("[deleteCourierScene.enter] users:", users);
    const approvedUsers = Object.entries(users)
      .filter(([id, user]) => user.status === "approved")
      .map(([id, user]) => ({ id, name: user.name }));

    console.log("[deleteCourierScene.enter] approvedUsers:", approvedUsers);

    if (approvedUsers.length === 0) {
      await ctx.reply("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–æ–≤.", adminMenu());
      return await ctx.scene.leave();
    }

    const keyboard = approvedUsers.map((user) => [Markup.button.callback(user.name, `delete_${user.id}`)]);

    await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—å–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", Markup.inlineKeyboard([...keyboard, [Markup.button.callback("‚ùå –û—Ç–º–µ–Ω–∞", "cancel_delete")]]));
  } catch (err) {
    console.error("[deleteCourierScene.enter] ERROR:", err);
    await ctx.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    await ctx.scene.leave();
  }
});

deleteCourierScene.action(/^delete_(.+)$/, async (ctx) => {
  try {
    console.log("[deleteCourierScene.action] ctx.match:", ctx.match);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
    if (ctx.from.id.toString() !== ADMIN_ID) {
      console.warn(`[deleteCourierScene.action] User ${ctx.from.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è —É–¥–∞–ª–∏—Ç—å –∫—É—Ä—å–µ—Ä–∞ –±–µ–∑ –ø—Ä–∞–≤`);
      await ctx.answerCbQuery("–ù–µ—Ç –ø—Ä–∞–≤");
      return;
    }

    const userId = ctx.match[1];
    console.log("[deleteCourierScene.action] userId:", userId);
    const user = users[userId];
    console.log("[deleteCourierScene.action] user:", user);

    if (!user) {
      await ctx.answerCbQuery("–ö—É—Ä—å–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω");
      console.warn("[deleteCourierScene.action] –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", userId);
      return await ctx.scene.leave();
    }

    delete users[userId];
    try {
      saveUsers();
      console.log("[deleteCourierScene.action] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω –∏ users —Å–æ—Ö—Ä–∞–Ω—ë–Ω:", userId);
    } catch (e) {
      console.error("[deleteCourierScene.action] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ users:", e);
    }

    await ctx.editMessageText(`–ö—É—Ä—å–µ—Ä ${user.name} —É–¥–∞–ª—ë–Ω.`);
    await ctx.answerCbQuery("–ö—É—Ä—å–µ—Ä —É–¥–∞–ª—ë–Ω");

    try {
      await bot.telegram.sendMessage(userId, "‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª —É–¥–∞–ª—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.");
      console.log("[deleteCourierScene.action] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:", userId);
    } catch (err) {
      console.error("[deleteCourierScene.action] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:", userId, err);
    }

    return await ctx.scene.leave();
  } catch (err) {
    console.error("[deleteCourierScene.action] ERROR:", err);
    await ctx.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    await ctx.scene.leave();
  }
});

deleteCourierScene.action("cancel_delete", async (ctx) => {
  try {
    await ctx.answerCbQuery("–û—Ç–º–µ–Ω–µ–Ω–æ");
    try {
      await ctx.deleteMessage();
    } catch (e) {
      console.warn("[deleteCourierScene.cancel_delete] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:", e);
    }
    return await ctx.scene.leave();
  } catch (err) {
    console.error("[deleteCourierScene.cancel_delete] ERROR:", err);
    await ctx.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    await ctx.scene.leave();
  }
});

deleteCourierScene.on("message", async (ctx) => {
  try {
    console.log("[deleteCourierScene.on(message)] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:", ctx.message);
    await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫—É—Ä—å–µ—Ä–∞.");
  } catch (err) {
    console.error("[deleteCourierScene.on(message)] ERROR:", err);
    await ctx.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
});

// ==================== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ü–µ–Ω –∏ —Å–µ—Å—Å–∏–π ====================
const stage = new Scenes.Stage([registrationScene, deleteCourierScene]);
bot.use(session());
bot.use(stage.middleware());

// ==================== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ====================
bot.start(async (ctx) => {
  const userId = ctx.from.id.toString();

  if (userId === ADMIN_ID) {
    return await ctx.reply("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!", adminMenu());
  }

  if (users[userId]?.status === "approved") {
    return await ctx.reply(`${users[userId].name}, –í—ã —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –±–æ—Ç–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`, getMainMenuInline());
  }

  if (users[userId]?.status === "pending") {
    return await ctx.reply("‚è≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.");
  }

  return await ctx.scene.enter("registration");
});

// –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
bot.hears("üë• –°–ø–∏—Å–æ–∫ –∫—É—Ä—å–µ—Ä–æ–≤", async (ctx) => {
  const userId = ctx.from.id.toString();

  if (userId !== ADMIN_ID) {
    return await ctx.reply("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", getMainMenuInline());
  }

  const approvedUsers = Object.entries(users)
    .filter(([id, user]) => user.status === "approved")
    .map(([id, user]) => ({ id, name: user.name }));

  if (approvedUsers.length === 0) {
    return await ctx.reply("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–æ–≤.", adminMenu());
  }

  let message = "üìã –°–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–æ–≤:\n\n";
  approvedUsers.forEach((user, index) => {
    message += `${index + 1}. ${user.name} (ID: ${user.id})\n`;
  });

  await ctx.reply(message, adminMenu());
});

bot.hears("‚ùå –£–¥–∞–ª–∏—Ç—å –∫—É—Ä—å–µ—Ä–∞", async (ctx) => {
  const userId = ctx.from.id.toString();

  if (userId !== ADMIN_ID) {
    return await ctx.reply("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", getMainMenuInline());
  }

  await ctx.scene.enter("deleteCourier");
});

bot.hears("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", async (ctx) => {
  const userId = ctx.from.id.toString();
  await ctx.reply("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", userId === ADMIN_ID ? adminMenu() : getMainMenuInline());
});

// ==================== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ ====================
bot.on("callback_query", async (ctx) => {
  const data = ctx.callbackQuery.data;
  const userId = ctx.from.id.toString();
  const { from, to } = getWeekBounds(true);
  ctx.session = ctx.session || {};

  // ========== –Æ–∑–µ—Ä—Å–∫–æ–µ –∏–Ω–ª–∞–π–Ω-–º–µ–Ω—é ==========
  if (
    data.startsWith('menu:') ||
    data.startsWith('report:') ||
    data.startsWith('schedule:')
  ) {
    // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if (data === 'menu:main') {
		const userId = ctx.from.id.toString();
      await ctx.editMessageText(`${users[userId].name}, –í—ã —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –±–æ—Ç–∞.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`, getMainMenuInline());
      return;
    }

    // –ü–æ–¥–º–µ–Ω—é –¢–∞–±–µ–ª—å
    if (data === 'menu:report') {
      await ctx.editMessageText(`–û—Ç—á–µ—Ç –ø–æ –≤–∞—à–µ–π –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç–µ.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`, getReportMenuInline());
      return;
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ "–ù–∞–∑–∞–¥" –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –æ—Ç—á—ë—Ç–∞!
    if (data.startsWith('report:')) {
      await ctx.editMessageText('‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Ç–∞–±–µ–ª—å...', getBackInlineMenu('menu:report'));
      let period = null;
      if (data === 'report:today') period = 'today';
      if (data === 'report:yesterday') period = 'yesterday';
      if (data === 'report:week_current') period = 'current_week';
      if (data === 'report:week_prev') period = 'last_week';
      try {
        const text = await sendReportText(userId, period);
        await ctx.editMessageText(text, { parse_mode: "Markdown", ...getBackInlineMenu('menu:report') });
      } catch (e) {
        await ctx.editMessageText('‚ùó ' + e.message, getBackInlineMenu('menu:report'));
      }
      return;
    }

    // –ü–æ–¥–º–µ–Ω—é –ì—Ä–∞—Ñ–∏–∫
    if (data === 'menu:schedule') {
      await ctx.editMessageText(`–ü—Ä–æ—Å–º–æ—Ç—Ä –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`, getScheduleMenuInline());
      return;
    }

    // –ü—Ä–æ—Å–º–æ—Ç—Ä –≥—Ä–∞—Ñ–∏–∫–∞ ‚Äî —Ç–æ–ª—å–∫–æ "–ù–∞–∑–∞–¥"
    if (data === 'schedule:view:current' || data === 'schedule:view:next') {
      await ctx.editMessageText('‚è≥ –ü–æ–ª—É—á–∞—é –≥—Ä–∞—Ñ–∏–∫...', getBackInlineMenu('menu:schedule'));
      try {
        const nextWeek = data.endsWith('next');
        const grafText = await getScheduleText(SPREADSHEET_ID, userId, nextWeek);
        await ctx.editMessageText(grafText, { parse_mode: "Markdown", ...getBackInlineMenu('menu:schedule') });
      } catch (e) {
        await ctx.editMessageText('‚ùó ' + e.message, getBackInlineMenu('menu:schedule'));
      }
      return;
    }

    // –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥—Ä–∞—Ñ–∏–∫ (–≤—ã–±–æ—Ä –Ω–µ–¥–µ–ª–∏)
    if (data === 'schedule:view') {
      await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é:', Markup.inlineKeyboard([
        [Markup.button.callback("–¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è", "schedule:view:current")],
        [Markup.button.callback("–°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è", "schedule:view:next")],
        [Markup.button.callback("‚óÄÔ∏è –ù–∞–∑–∞–¥", "menu:schedule")]
      ]));
      return;
    }

    // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫/–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ ‚Äî —Ç—É—Ç —Ç–æ–∂–µ —Ç–æ–ª—å–∫–æ –ù–∞–∑–∞–¥
    if (data === 'schedule:send') {
		  if (!isScheduleSubmissionAllowed()) {
    await ctx.editMessageText(
      "–ì—Ä–∞—Ñ–∏–∫ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Å 22:00 —á–µ—Ç–≤–µ—Ä–≥–∞ –∏ –¥–æ 12:00 –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è.",
      getBackInlineMenu('menu:schedule')
    );
    return;
  }
      const warn = `üìÖ –ü—Ä–∏—à–ª–∏—Ç–µ –≤–∞—à –≥—Ä–∞—Ñ–∏–∫ –Ω–∞ –ø–µ—Ä–∏–æ–¥ ${from.format("DD.MM")}‚Äì${to.format("DD.MM")} –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n–ü–Ω: 10-23\n–í—Ç: 10-23\n‚Ä¶`;
      await ctx.editMessageText(warn, getBackInlineMenu('menu:schedule'));
      ctx.session.awaitingSchedule = true;
      ctx.session.scheduleMode = 'send';
      ctx.session.lastInlineMsgId = ctx.callbackQuery.message.message_id;
      return;
    }
    if (data === 'schedule:edit') {
      const warn = `üìÖ –ü—Ä–∏—à–ª–∏—Ç–µ –≤–∞—à –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –Ω–∞ –ø–µ—Ä–∏–æ–¥ ${from.format("DD.MM")}‚Äì${to.format("DD.MM")} –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n–ü–Ω: 10-23\n–í—Ç: 10-23\n‚Ä¶`;
      await ctx.editMessageText(warn, getBackInlineMenu('menu:schedule'));
      ctx.session.awaitingSchedule = true;
      ctx.session.scheduleMode = 'edit';
      ctx.session.lastInlineMsgId = ctx.callbackQuery.message.message_id;
      return;
    }
  }

  // ==== –ê–î–ú–ò–ù–°–ö–ò–ï/–†–ï–ì–ò–°–¢–†–ê–¶–ò–û–ù–ù–´–ï –í–ï–¢–ö–ò (–æ—Å—Ç–∞–≤—å –∫–∞–∫ –±—ã–ª–æ!) ====

  // –ü—Ä–∏–º–µ—Ä: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≥—Ä–∞—Ñ–∏–∫–∞ (—Å—Ç–∞—Ä–æ–µ)
  if (data === "SHOW_SCHEDULE_THIS" || data === "SHOW_SCHEDULE_NEXT") {
    await ctx.answerCbQuery();
    try {
      await ctx.deleteMessage();
    } catch (e) {
      console.log("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏:", e);
    }
    await handleShowScheduleInline(ctx, data === "SHOW_SCHEDULE_NEXT");
    return;
  }

  // –ü—Ä–∏–º–µ—Ä: –æ—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è
  if (data === "cancel_delete") {
    await ctx.answerCbQuery("–û—Ç–º–µ–Ω–µ–Ω–æ");
    await ctx.deleteMessage();
    return;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
  if (userId !== ADMIN_ID) {
    return await ctx.answerCbQuery("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤");
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  if (data.startsWith("approve_") || data.startsWith("reject_")) {
    const idToChange = data.split("_")[1];
    const user = users[idToChange];

    if (!user) {
      return await ctx.answerCbQuery("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }

try {
  if (data.startsWith("approve_")) {
    users[idToChange].status = "approved";
    saveUsers();

    await ctx.editMessageText(`‚úÖ –ö—É—Ä—å–µ—Ä ${user.name} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.`);
    await ctx.answerCbQuery("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω");

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ‚Äî –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ
    try {
      await bot.telegram.sendMessage(
        idToChange,
        `–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!\n–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å :)\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
        getMainMenuInline()
      );
    } catch (err) {
      console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∫—É—Ä—å–µ—Ä—É ${idToChange}:`, err.message);
    }
  }

  if (data.startsWith("reject_")) {
    delete users[idToChange];
    saveUsers();

    await ctx.editMessageText(`‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç ${user.name} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.`);
    await ctx.answerCbQuery("–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞");

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
    try {
      await bot.telegram.sendMessage(
        idToChange,
        `‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.`
      );
    } catch (err) {
      console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–∞–∑–µ –∫—É—Ä—å–µ—Ä—É ${idToChange}:`, err.message);
    }
  }
} catch (err) {
  await ctx.answerCbQuery("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞");
  console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:", err.message);
}

    return;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫—É—Ä—å–µ—Ä–∞
  if (data.startsWith("delete_")) {
    const idToDelete = data.split("_")[1];
    const user = users[idToDelete];

    if (!user) {
      await ctx.answerCbQuery("–ö—É—Ä—å–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω");
      return;
    }

    delete users[idToDelete];
    saveUsers();

    await ctx.editMessageText(`–ö—É—Ä—å–µ—Ä ${user.name} —É–¥–∞–ª—ë–Ω.`);
    await ctx.answerCbQuery("–ö—É—Ä—å–µ—Ä —É–¥–∞–ª—ë–Ω");

    try {
      await bot.telegram.sendMessage(idToDelete, "‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª —É–¥–∞–ª—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.");
    } catch (err) {}
    return;
  }

  // –ï—Å–ª–∏ callback –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω
  await ctx.answerCbQuery("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞");
});

// ==================== –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è grafik.js ====================

async function handleShowScheduleInline(ctx, nextWeek) {
  const userId = ctx.from.id.toString();
  const isAdmin = userId === process.env.ADMIN_ID;
  if (!isAdmin && (!users[userId] || users[userId].status !== "approved")) {
    return ctx.reply("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω");
  }
  const fio = isAdmin ? null : users[userId]?.name;

  try {
    await showSchedule(
      SPREADSHEET_ID,
      ctx.chat.id,
      ctx.telegram,
      nextWeek, // true/false: —Å–ª–µ–¥—É—é—â–∞—è/—Ç–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è
      isAdmin,
      fio
    );
  } catch (e) {
    console.error(e);
    await ctx.reply("‚ùó " + e.message);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
bot.on("text", async (ctx) => {
  ctx.session = ctx.session || {};
  const userId = ctx.from.id.toString();

  // –ù–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (–¥–æ–±–∞–≤–∏—Ç—å)
  if (ctx.session.awaitingSchedule && ctx.session.scheduleMode === 'send') {
    ctx.session.awaitingSchedule = false;
    try {
      ctx.session.currentSheet = await ensureWeekSheetAndAsk(SPREADSHEET_ID, ctx.chat.id, ctx.telegram);
      await parseAndAppend(SPREADSHEET_ID, ctx.session.currentSheet, ctx.message.text.trim(), userId);
      await ctx.telegram.editMessageText(ctx.chat.id, ctx.session.lastInlineMsgId, null, "‚úÖ –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!", getScheduleMenuInline());
    } catch (e) {
      await ctx.telegram.editMessageText(ctx.chat.id, ctx.session.lastInlineMsgId, null, '‚ùó ' + e.message, getScheduleMenuInline());
    }
    return;
  }
  // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
  if (ctx.session.awaitingSchedule && ctx.session.scheduleMode === 'edit') {
    ctx.session.awaitingSchedule = false;
    try {
      ctx.session.currentSheet = await ensureWeekSheetAndAsk(SPREADSHEET_ID, ctx.chat.id, ctx.telegram, false);
      await upsertSchedule(SPREADSHEET_ID, ctx.session.currentSheet, ctx.message.text.trim(), userId, ctx.telegram);
      await ctx.telegram.editMessageText(ctx.chat.id, ctx.session.lastInlineMsgId, null, "‚úÖ –ì—Ä–∞—Ñ–∏–∫ –æ–±–Ω–æ–≤–ª—ë–Ω!", getScheduleMenuInline());
    } catch (e) {
      await ctx.telegram.editMessageText(ctx.chat.id, ctx.session.lastInlineMsgId, null, '‚ùó ' + e.message, getScheduleMenuInline());
    }
    return;
  }
});

// ==================== –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤ ====================
async function sendReportText(userId, period) {
  if (!users[userId] || users[userId].status !== "approved") {
    return "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é /start";
  }
  const fullName = users[userId].name.trim().toLowerCase();
  const auth = new google.auth.GoogleAuth({
    keyFile: "creds.json",
    scopes: ["https://www.googleapis.com/auth/spreadsheets.readonly"],
  });
  const client = await auth.getClient();
  const sheets = google.sheets({ version: "v4", auth: client });

  const sheetNames = [
    "–°—É—Ä–≥—É—Ç 1 (30 –ª–µ—Ç –ø–æ–±–µ–¥—ã)",
    "–°—É—Ä–≥—É—Ç 2 (–£—Å–æ–ª—å—Ü–µ–≤–∞)",
    "–°—É—Ä–≥—É—Ç 3 (–ú–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω–∞—è)"
  ];

  let allRows = [];
  for (const sheetName of sheetNames) {
    const res = await sheets.spreadsheets.values.get({
      spreadsheetId: process.env.SHEET_ID,
      range: `${sheetName}!A2:Z`,
    });
    if (res.data.values) allRows.push(...res.data.values);
  }
  const rows = allRows;

  function parseDate(str) {
    if (!str || typeof str !== "string" || !str.includes(".")) return null;
    const [day, month, year] = str.split(".");
    return new Date(`${month}/${day}/${year}`);
  }
  function getPreviousWeekRange() {
    const now = new Date();
    const day = now.getDay();
    const currentMonday = new Date(now);
    currentMonday.setDate(now.getDate() - ((day + 6) % 7));
    const lastMonday = new Date(currentMonday);
    lastMonday.setDate(currentMonday.getDate() - 7);
    const lastSunday = new Date(lastMonday);
    lastSunday.setDate(lastMonday.getDate() + 6);
    lastMonday.setHours(0, 0, 0, 0);
    lastSunday.setHours(23, 59, 59, 999);
    return { fromDate: lastMonday, toDate: lastSunday };
  }
  function getCurrentWeekRange() {
    const now = new Date();
    const day = now.getDay();
    const diffToMonday = (day + 6) % 7;
    const monday = new Date(now);
    monday.setDate(now.getDate() - diffToMonday);
    monday.setHours(0, 0, 0, 0);
    const sunday = new Date(monday);
    sunday.setDate(monday.getDate() + 6);
    sunday.setHours(23, 59, 59, 999);
    return { fromDate: monday, toDate: sunday };
  }

  if (period === "today" || period === "yesterday") {
    const today = new Date();
    const target = new Date(today);
    if (period === "yesterday") target.setDate(today.getDate() - 1);
    const targetStr = target.toLocaleDateString("ru-RU");

    const match = rows.find((r) => {
      const rowName = r[2]?.trim().toLowerCase();
      const rowDateStr = r[1];
      const rowDate = parseDate(rowDateStr);
      return rowName === fullName && rowDate?.toLocaleDateString("ru-RU") === targetStr;
    });
    if (!match) {
      return `–î–∞–Ω–Ω—ã—Ö –∑–∞ ${period === "today" ? "—Å–µ–≥–æ–¥–Ω—è" : "–≤—á–µ—Ä–∞"} –Ω–µ—Ç.`;
    }
    const [, date, , , , , , hours, km, orders, , , , times, nps, , , , , , , zaezd1, zaezd2, salary] = match;
    const totalZaezd = parseFloat(zaezd1 || 0) + parseFloat(zaezd2 || 0);
    return (
      `üìÖ ${date}\nüë§ ${users[userId].name}\n\n` +
      `–û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ: ${hours}\n` +
      `–ü—Ä–æ–±–µ–≥: ${km} –∫–º\n` +
      `–ó–∞–∫–∞–∑—ã: ${orders}\n` +
      `–ó–∞–µ–∑–¥—ã: ${totalZaezd}\n` +
      `–°—É–º–º–∞: ${salary} ‚ÇΩ`
    );
  }
  if (period === "last_week") {
    const { fromDate, toDate } = getPreviousWeekRange();
    const filtered = rows.filter((r) => {
      const rowName = r[2]?.trim().toLowerCase();
      const rowDateStr = r[1];
      const rowDate = parseDate(rowDateStr);
      return rowName === fullName && rowDate && rowDate >= fromDate && rowDate <= toDate;
    });
    if (filtered.length === 0) {
      return (
        `–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø—Ä–æ—à–ª—É—é –Ω–µ–¥–µ–ª—é ` +
        `(${fromDate.toLocaleDateString("ru-RU")} - ${toDate.toLocaleDateString("ru-RU")})`
      );
    }
    let totalHours = 0,
      totalKm = 0,
      totalOrders = 0,
      totalSalary = 0,
      totalZaezdy = 0;
    let times = "",
      rating = "";
    let message =
      `üìÖ –¢–∞–±–µ–ª—å –∑–∞ –ø—Ä–æ—à–ª—É—é –Ω–µ–¥–µ–ª—é ` +
      `(${fromDate.toLocaleDateString("ru-RU")} - ${toDate.toLocaleDateString("ru-RU")})\n` +
      `üë§ ${users[userId].name}`;
    for (const r of filtered) {
      const [, date, , , , , , hours, km, orders, , , , time, nps, , , , , , , zaezd1, zaezd2, salary] = r;
      const totalZaezd = parseFloat(zaezd1 || 0) + parseFloat(zaezd2 || 0);
      message +=
        `\n\nüìÜ ${date}:\n` +
        `–û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ: ${hours} —á\n` +
        `–ü—Ä–æ–±–µ–≥: ${km} –∫–º\n` +
        `–ó–∞–∫–∞–∑—ã: ${orders}\n` +
        `–ó–∞–µ–∑–¥—ã: ${totalZaezd}\n` +
        `–°—É–º–º–∞: ${salary} ‚ÇΩ`;
      totalHours += parseFloat(hours || 0);
      totalKm += parseFloat(km || 0);
      totalOrders += parseInt(orders || 0);
      totalSalary += parseFloat(salary || 0);
      totalZaezdy += totalZaezd;
      times = time;
      rating = nps;
    }
    message +=
      `\n\n–ò–¢–û–ì–û:\n` +
      `–û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ: ${totalHours} —á\n` +
      `–ü—Ä–æ–±–µ–≥: ${totalKm} –∫–º\n` +
      `–ó–∞–∫–∞–∑–æ–≤: ${totalOrders}\n` +
      `–ó–∞–µ–∑–¥—ã: ${totalZaezdy}\n` +
      `–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${totalSalary.toFixed(2)} ‚ÇΩ\n` +
      `–†–µ–π—Ç–∏–Ω–≥: ${rating}\n` +
      `–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: ${times} –º–∏–Ω`;
    return message;
  }
  if (period === "current_week") {
    const { fromDate, toDate } = getCurrentWeekRange();
    const filtered = rows.filter((r) => {
      const rowName = r[2]?.trim().toLowerCase();
      const rowDate = parseDate(r[1]);
      return rowName === fullName && rowDate && rowDate >= fromDate && rowDate <= toDate;
    });
    if (filtered.length === 0) {
      return (
        `–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é ` +
        `(${fromDate.toLocaleDateString("ru-RU")} - ${toDate.toLocaleDateString("ru-RU")})`
      );
    }
    let totalHours = 0,
      totalKm = 0,
      totalOrders = 0,
      totalSalary = 0,
      totalZaezdy = 0;
    let lastTime = "",
      lastRating = "";
    let message =
      `üìÖ –¢–∞–±–µ–ª—å –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é ` +
      `(${fromDate.toLocaleDateString("ru-RU")} - ${toDate.toLocaleDateString("ru-RU")})\n` +
      `üë§ ${users[userId].name}`;
    for (const r of filtered) {
      const [, date, , , , , , hours, km, orders, , , , time, nps, , , , , , , zaezd1, zaezd2, salary] = r;
      const zaezdy = parseFloat(zaezd1 || 0) + parseFloat(zaezd2 || 0);
      message +=
        `\n\nüìÜ ${date}:\n` +
        `–û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ: ${hours} —á\n` +
        `–ü—Ä–æ–±–µ–≥: ${km} –∫–º\n` +
        `–ó–∞–∫–∞–∑—ã: ${orders}\n` +
        `–ó–∞–µ–∑–¥—ã: ${zaezdy}\n` +
        `–°—É–º–º–∞: ${salary} ‚ÇΩ`;
      totalHours += parseFloat(hours || 0);
      totalKm += parseFloat(km || 0);
      totalOrders += parseInt(orders || 0, 10);
      totalSalary += parseFloat(salary || 0);
      totalZaezdy += zaezdy;
      lastTime = time;
      lastRating = nps;
    }
    message +=
      `\n\n–ò–¢–û–ì–û:\n` +
      `–û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ: ${totalHours} —á\n` +
      `–ü—Ä–æ–±–µ–≥: ${totalKm} –∫–º\n` +
      `–ó–∞–∫–∞–∑–æ–≤: ${totalOrders}\n` +
      `–ó–∞–µ–∑–¥—ã: ${totalZaezdy}\n` +
      `–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${totalSalary.toFixed(2)} ‚ÇΩ\n` +
      `–†–µ–π—Ç–∏–Ω–≥: ${lastRating}\n` +
      `–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: ${lastTime} –º–∏–Ω`;
    return message;
  }
  return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.";
}

// ==================== –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ ====================
bot.catch(async (err, ctx) => {
  const userId = ctx.from?.id || "unknown";
  await ctx.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", getMainMenuInline());
});

// ==================== –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ====================
bot
  .launch()
  .then(() => {
    console.log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!");
  })
  .catch((err) => {
    process.exit(1);
  });

// ==================== –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã ====================
process.once("SIGINT", () => {
  bot.stop("SIGINT");
  process.exit();
});

process.once("SIGTERM", () => {
  bot.stop("SIGTERM");
  process.exit();
});
