require("dotenv").config();
const { Telegraf, Scenes, Markup, session } = require("telegraf");
const fs = require("fs");
const { google } = require("googleapis");
const moment = require("moment-timezone");
const cron = require("node-cron");

const { ensureWeekSheetAndAsk, upsertSchedule, showSchedule, parseAndAppend } = require("./grafik.js");

// ==================== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ====================
const bot = new Telegraf(process.env.BOT_TOKEN);
const ADMIN_ID = process.env.ADMIN_ID;
const SPREADSHEET_ID = process.env.GRAFIK;

// ==================== –†–∞–±–æ—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ ====================
let users = fs.existsSync("users.json") ? JSON.parse(fs.readFileSync("users.json")) : {};

function saveUsers() {
  fs.writeFileSync("users.json", JSON.stringify(users, null, 2));
}

// ==================== Google Sheets ====================
const auth = new google.auth.GoogleAuth({
  keyFile: "creds.json",
  scopes: ["https://www.googleapis.com/auth/spreadsheets.readonly"],
});

// ==================== –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–∞–º–∏ ====================
function getPreviousWeekRange() {
  const now = new Date();
  const day = now.getDay();
  const currentMonday = new Date(now);
  currentMonday.setDate(now.getDate() - ((day + 6) % 7));
  const lastMonday = new Date(currentMonday);
  lastMonday.setDate(currentMonday.getDate() - 7);
  const lastSunday = new Date(lastMonday);
  lastSunday.setDate(lastMonday.getDate() + 6);
  lastMonday.setHours(0, 0, 0, 0);
  lastSunday.setHours(23, 59, 59, 999);
  return { fromDate: lastMonday, toDate: lastSunday };
}

cron.schedule("0 12 * * 5", async () => {
  const now = moment().tz("Asia/Yekaterinburg");
  console.log(`[–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ] –†–∞—Å—Å—ã–ª–∞—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ ${now.format("YYYY-MM-DD HH:mm")}`);
  for (const [userId, user] of Object.entries(users)) {
    if (user.status === "approved") {
      try {
        await bot.telegram.sendMessage(
          userId,
          "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–µ–º! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –≥—Ä–∞—Ñ–∏–∫ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫¬ª –≤ –º–µ–Ω—é."
        );
      } catch (e) {
        console.error(`[–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ] –û—à–∏–±–∫–∞ –¥–ª—è ${userId}:`, e.message);
      }
    }
  }
});

function getCurrentWeekRange() {
  const now = new Date();
  const day = now.getDay(); // 0 (–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ) ‚Ä¶ 6 (—Å—É–±–±–æ—Ç–∞)

  const diffToMonday = (day + 6) % 7;

  const monday = new Date(now);
  monday.setDate(now.getDate() - diffToMonday);
  monday.setHours(0, 0, 0, 0);

  const sunday = new Date(monday);
  sunday.setDate(monday.getDate() + 6);
  sunday.setHours(23, 59, 59, 999);

  return { fromDate: monday, toDate: sunday };
}

function parseDate(str) {
  if (!str || typeof str !== "string" || !str.includes(".")) {
    return null;
  }
  const [day, month, year] = str.split(".");
  return new Date(`${month}/${day}/${year}`);
}

// ==================== –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ====================
function mainMenu() {
  return Markup.keyboard([
    ["üìÖ –¢–∞–±–µ–ª—å –∑–∞ —Å–µ–≥–æ–¥–Ω—è", "üìÜ –¢–∞–±–µ–ª—å –∑–∞ –≤—á–µ—Ä–∞"],
    ["üìä –¢–∞–±–µ–ª—å –∑–∞ –ø—Ä–æ—à–ª—É—é –Ω–µ–¥–µ–ª—é", "üìä –¢–∞–±–µ–ª—å –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é"],
    ["–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫", "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥—Ä–∞—Ñ–∏–∫"],
    ["–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫"],
  ]).resize();
}

// ==================== –ê–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é ====================
function adminMenu() {
  return Markup.keyboard([
    ["üë• –°–ø–∏—Å–æ–∫ –∫—É—Ä—å–µ—Ä–æ–≤", "‚ùå –£–¥–∞–ª–∏—Ç—å –∫—É—Ä—å–µ—Ä–∞"],
    ["–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥—Ä–∞—Ñ–∏–∫", "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"],
  ]).resize();
}

// ==================== –°—Ü–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ====================
const registrationScene = new Scenes.BaseScene("registration");

registrationScene.enter(async (ctx) => {
  const userId = ctx.from.id.toString();
  await ctx.reply("üëã –ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –§–ò–û –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", Markup.removeKeyboard());
});

registrationScene.on("text", async (ctx) => {
  const userId = ctx.from.id.toString();
  const name = ctx.message.text.trim();

  if (!name || name.length < 3) {
    return await ctx.reply("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –§–ò–û (–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞)");
  }

  users[userId] = { name, status: "pending" };
  saveUsers();

  try {
    const userInfo = ctx.from;
    const username = userInfo.username ? `@${userInfo.username}` : "–Ω–µ —É–∫–∞–∑–∞–Ω";
    const fullTelegramName = `${userInfo.first_name || ""} ${userInfo.last_name || ""}`.trim();

    await bot.telegram.sendMessage(
      ADMIN_ID,
      `üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:\n` +
        `üë§ –í–≤–µ–¥—ë–Ω–Ω–æ–µ –§–ò–û: ${name}\n` +
        `üîπ Telegram: ${fullTelegramName} (${username})\n` +
        `üÜî Telegram ID: ${userId}`,
      Markup.inlineKeyboard([
        Markup.button.callback(`‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å`, `approve_${userId}`),
        Markup.button.callback(`‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å`, `reject_${userId}`),
      ])
    );

    await ctx.reply("‚è≥ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.");
    await ctx.scene.leave();
  } catch (err) {
    return await ctx.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
});

registrationScene.on("message", async (ctx) => {
  await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç");
});

// ==================== –°—Ü–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫—É—Ä—å–µ—Ä–∞ ====================
const deleteCourierScene = new Scenes.BaseScene("deleteCourier");

deleteCourierScene.enter(async (ctx) => {
  try {
    console.log("[deleteCourierScene.enter] users:", users);
    const approvedUsers = Object.entries(users)
      .filter(([id, user]) => user.status === "approved")
      .map(([id, user]) => ({ id, name: user.name }));

    console.log("[deleteCourierScene.enter] approvedUsers:", approvedUsers);

    if (approvedUsers.length === 0) {
      await ctx.reply("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–æ–≤.", adminMenu());
      return await ctx.scene.leave();
    }

    const keyboard = approvedUsers.map((user) => [Markup.button.callback(user.name, `delete_${user.id}`)]);

    await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—å–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", Markup.inlineKeyboard([...keyboard, [Markup.button.callback("‚ùå –û—Ç–º–µ–Ω–∞", "cancel_delete")]]));
  } catch (err) {
    console.error("[deleteCourierScene.enter] ERROR:", err);
    await ctx.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    await ctx.scene.leave();
  }
});

deleteCourierScene.action(/^delete_(.+)$/, async (ctx) => {
  try {
    console.log("[deleteCourierScene.action] ctx.match:", ctx.match);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
    if (ctx.from.id.toString() !== ADMIN_ID) {
      console.warn(`[deleteCourierScene.action] User ${ctx.from.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è —É–¥–∞–ª–∏—Ç—å –∫—É—Ä—å–µ—Ä–∞ –±–µ–∑ –ø—Ä–∞–≤`);
      await ctx.answerCbQuery("–ù–µ—Ç –ø—Ä–∞–≤");
      return;
    }

    const userId = ctx.match[1];
    console.log("[deleteCourierScene.action] userId:", userId);
    const user = users[userId];
    console.log("[deleteCourierScene.action] user:", user);

    if (!user) {
      await ctx.answerCbQuery("–ö—É—Ä—å–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω");
      console.warn("[deleteCourierScene.action] –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", userId);
      return await ctx.scene.leave();
    }

    delete users[userId];
    try {
      saveUsers();
      console.log("[deleteCourierScene.action] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω –∏ users —Å–æ—Ö—Ä–∞–Ω—ë–Ω:", userId);
    } catch (e) {
      console.error("[deleteCourierScene.action] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ users:", e);
    }

    await ctx.editMessageText(`–ö—É—Ä—å–µ—Ä ${user.name} —É–¥–∞–ª—ë–Ω.`);
    await ctx.answerCbQuery("–ö—É—Ä—å–µ—Ä —É–¥–∞–ª—ë–Ω");

    try {
      await bot.telegram.sendMessage(userId, "‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª —É–¥–∞–ª—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.");
      console.log("[deleteCourierScene.action] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:", userId);
    } catch (err) {
      console.error("[deleteCourierScene.action] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:", userId, err);
    }

    return await ctx.scene.leave();
  } catch (err) {
    console.error("[deleteCourierScene.action] ERROR:", err);
    await ctx.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    await ctx.scene.leave();
  }
});

deleteCourierScene.action("cancel_delete", async (ctx) => {
  try {
    await ctx.answerCbQuery("–û—Ç–º–µ–Ω–µ–Ω–æ");
    try {
      await ctx.deleteMessage();
    } catch (e) {
      console.warn("[deleteCourierScene.cancel_delete] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:", e);
    }
    return await ctx.scene.leave();
  } catch (err) {
    console.error("[deleteCourierScene.cancel_delete] ERROR:", err);
    await ctx.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    await ctx.scene.leave();
  }
});

deleteCourierScene.on("message", async (ctx) => {
  try {
    console.log("[deleteCourierScene.on(message)] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:", ctx.message);
    await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫—É—Ä—å–µ—Ä–∞.");
  } catch (err) {
    console.error("[deleteCourierScene.on(message)] ERROR:", err);
    await ctx.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
});

// ==================== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ü–µ–Ω –∏ —Å–µ—Å—Å–∏–π ====================
const stage = new Scenes.Stage([registrationScene, deleteCourierScene]);
bot.use(session());
bot.use(stage.middleware());

// ==================== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ====================
bot.start(async (ctx) => {
  const userId = ctx.from.id.toString();
  const fullNameTG = `${ctx.from.first_name} ${ctx.from.last_name || ""}`.trim();

  if (userId === ADMIN_ID) {
    return await ctx.reply("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!", adminMenu());
  }

  if (users[userId]?.status === "approved") {
    return await ctx.reply(`‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ ${users[userId].name}`, mainMenu());
  }

  if (users[userId]?.status === "pending") {
    return await ctx.reply("‚è≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.", mainMenu());
  }

  return await ctx.scene.enter("registration");
});

bot.command("menu", async (ctx) => {
  const userId = ctx.from.id.toString();
  if (userId === ADMIN_ID) {
    await ctx.reply("–ê–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é:", adminMenu());
  } else if (users[userId]?.status === "approved") {
    await ctx.reply("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", mainMenu());
  } else {
    await ctx.reply("–ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é /start");
  }
});

bot.help(async (ctx) => {
  const userId = ctx.from.id.toString();

  let helpText = "–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:\n";
  helpText += "/start - –Ω–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\n";
  helpText += "/menu - –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é\n";

  if (users[userId]?.status === "approved") {
    helpText += "\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n";
    helpText += "üìÖ –¢–∞–±–µ–ª—å –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n";
    helpText += "üìÜ –¢–∞–±–µ–ª—å –∑–∞ –≤—á–µ—Ä–∞\n";
    helpText += "üìä –¢–∞–±–µ–ª—å –∑–∞ –ø—Ä–æ—à–ª—É—é –Ω–µ–¥–µ–ª—é\n";
    helpText += "üìä –¢–∞–±–µ–ª—å –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é\n";
  }

  if (userId === ADMIN_ID) {
    helpText += "\n\n–ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã:\n";
    helpText += "üë• –°–ø–∏—Å–æ–∫ –∫—É—Ä—å–µ—Ä–æ–≤\n";
    helpText += "‚ùå –£–¥–∞–ª–∏—Ç—å –∫—É—Ä—å–µ—Ä–∞";
  }

  await ctx.reply(helpText, userId === ADMIN_ID ? adminMenu() : mainMenu());
});

// ==================== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π ====================
bot.hears("üìÖ –¢–∞–±–µ–ª—å –∑–∞ —Å–µ–≥–æ–¥–Ω—è", async (ctx) => {
  await sendReport(ctx, "today");
});

bot.hears("üìÜ –¢–∞–±–µ–ª—å –∑–∞ –≤—á–µ—Ä–∞", async (ctx) => {
  await sendReport(ctx, "yesterday");
});

bot.hears("üìä –¢–∞–±–µ–ª—å –∑–∞ –ø—Ä–æ—à–ª—É—é –Ω–µ–¥–µ–ª—é", async (ctx) => {
  await sendReport(ctx, "last_week");
});

bot.hears("üìä –¢–∞–±–µ–ª—å –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é", async (ctx) => {
  await sendReport(ctx, "current_week");
});

// –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
bot.hears("üë• –°–ø–∏—Å–æ–∫ –∫—É—Ä—å–µ—Ä–æ–≤", async (ctx) => {
  const userId = ctx.from.id.toString();

  if (userId !== ADMIN_ID) {
    return await ctx.reply("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", mainMenu());
  }

  const approvedUsers = Object.entries(users)
    .filter(([id, user]) => user.status === "approved")
    .map(([id, user]) => ({ id, name: user.name }));

  if (approvedUsers.length === 0) {
    return await ctx.reply("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–æ–≤.", adminMenu());
  }

  let message = "üìã –°–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–æ–≤:\n\n";
  approvedUsers.forEach((user, index) => {
    message += `${index + 1}. ${user.name} (ID: ${user.id})\n`;
  });

  await ctx.reply(message, adminMenu());
});

bot.hears("‚ùå –£–¥–∞–ª–∏—Ç—å –∫—É—Ä—å–µ—Ä–∞", async (ctx) => {
  const userId = ctx.from.id.toString();

  if (userId !== ADMIN_ID) {
    return await ctx.reply("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", mainMenu());
  }

  await ctx.scene.enter("deleteCourier");
});

bot.hears("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", async (ctx) => {
  const userId = ctx.from.id.toString();
  await ctx.reply("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", userId === ADMIN_ID ? adminMenu() : mainMenu());
});

// ==================== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ ====================
bot.on("callback_query", async (ctx) => {
  const data = ctx.callbackQuery.data;
  const adminId = ctx.from.id.toString();
  if (data === "SHOW_SCHEDULE_THIS" || data === "SHOW_SCHEDULE_NEXT") {
    await ctx.answerCbQuery();
    try {
      await ctx.deleteMessage();
    } catch (e) {
      console.log("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏:", e);
    }
    await handleShowScheduleInline(ctx, data === "SHOW_SCHEDULE_NEXT");
    return;
  }
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è
  if (data === "cancel_delete") {
    await ctx.answerCbQuery("–û—Ç–º–µ–Ω–µ–Ω–æ");
    await ctx.deleteMessage();
    return;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
  if (adminId !== ADMIN_ID) {
    return await ctx.answerCbQuery("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤");
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  if (data.startsWith("approve_") || data.startsWith("reject_")) {
    const userId = data.split("_")[1];
    const user = users[userId];

    if (!user) {
      return await ctx.answerCbQuery("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }

    try {
      if (data.startsWith("approve_")) {
        users[userId].status = "approved";
        saveUsers();

        await ctx.editMessageText(`‚úÖ –ö—É—Ä—å–µ—Ä ${user.name} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.`);
        await ctx.answerCbQuery("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω");

        await bot.telegram.sendMessage(userId, `‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!\n–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ –º–µ–Ω—é.`, mainMenu());
      }

      if (data.startsWith("reject_")) {
        delete users[userId];
        saveUsers();

        await ctx.editMessageText(`‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç ${user.name} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.`);
        await ctx.answerCbQuery("–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞");
        await bot.telegram.sendMessage(userId, `‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.`);
      }
    } catch (err) {
      await ctx.answerCbQuery("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞");
    }
    return;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫—É—Ä—å–µ—Ä–∞
  if (data.startsWith("delete_")) {
    const userId = data.split("_")[1];
    const user = users[userId];

    if (!user) {
      await ctx.answerCbQuery("–ö—É—Ä—å–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω");
      return;
    }

    delete users[userId];
    saveUsers();

    await ctx.editMessageText(`–ö—É—Ä—å–µ—Ä ${user.name} —É–¥–∞–ª—ë–Ω.`);
    await ctx.answerCbQuery("–ö—É—Ä—å–µ—Ä —É–¥–∞–ª—ë–Ω");

    try {
      await bot.telegram.sendMessage(userId, "‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª —É–¥–∞–ª—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.");
    } catch (err) {}
    return;
  }

  // –ï—Å–ª–∏ callback –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω
  await ctx.answerCbQuery("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞");
});
// ==================== –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è grafik.js ====================

bot.hears("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫", async (ctx) => {
  const userId = ctx.from.id.toString();
  if (!users[userId] || users[userId].status !== "approved") {
    return ctx.reply("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é /start", mainMenu());
  }
  ctx.session.waitingSchedule = true;
  try {
    ctx.session.currentSheet = await ensureWeekSheetAndAsk(SPREADSHEET_ID, ctx.chat.id, ctx.telegram);
  } catch (e) {
    console.error(e);
    await ctx.reply("‚ùó –û—à–∏–±–∫–∞: " + e.message, mainMenu());
    ctx.session.waitingSchedule = false;
  }
});

bot.hears("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥—Ä–∞—Ñ–∏–∫", (ctx) => {
  return ctx.reply(
    "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é:",
    Markup.inlineKeyboard([
      [Markup.button.callback("–¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è", "SHOW_SCHEDULE_THIS"), Markup.button.callback("–°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è", "SHOW_SCHEDULE_NEXT")],
    ])
  );
});

async function handleShowScheduleInline(ctx, nextWeek) {
  const userId = ctx.from.id.toString();
  const isAdmin = userId === process.env.ADMIN_ID;
  if (!isAdmin && (!users[userId] || users[userId].status !== "approved")) {
    return ctx.reply("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω");
  }
  const fio = isAdmin ? null : users[userId]?.name;

  try {
    await showSchedule(
      SPREADSHEET_ID,
      ctx.chat.id,
      ctx.telegram,
      nextWeek, // true/false: —Å–ª–µ–¥—É—é—â–∞—è/—Ç–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è
      isAdmin,
      fio
    );
  } catch (e) {
    console.error(e);
    await ctx.reply("‚ùó " + e.message);
  }
}

bot.hears("–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫", async (ctx) => {
  const userId = ctx.from.id.toString();
  if (!users[userId] || users[userId].status !== "approved") {
    return ctx.reply("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é /start", mainMenu());
  }
  ctx.session.waitingScheduleEdit = true; // –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Ä–∞–∑–ª–∏—á–µ–Ω–∏—è –≤ on('text')
  try {
    ctx.session.currentSheet = await ensureWeekSheetAndAsk(SPREADSHEET_ID, ctx.chat.id, ctx.telegram, false);
    await ctx.reply("‚úèÔ∏è –ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫ ‚Äî –æ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–µ–Ω–∏—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–π!", mainMenu());
  } catch (e) {
    console.error(e);
    await ctx.reply("‚ùó –û—à–∏–±–∫–∞: " + e.message, mainMenu());
    ctx.session.waitingScheduleEdit = false;
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
bot.on("text", async (ctx) => {
  // –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫
  if (ctx.session.waitingScheduleEdit) {
    ctx.session.waitingScheduleEdit = false;
    try {
      await upsertSchedule(SPREADSHEET_ID, ctx.session.currentSheet, ctx.message.text.trim(), ctx.chat.id, ctx.telegram);
      await ctx.reply("‚úÖ –í–∞—à –≥—Ä–∞—Ñ–∏–∫ –æ–±–Ω–æ–≤–ª—ë–Ω!", mainMenu());
    } catch (e) {
      console.error(e);
      await ctx.reply("‚ùó –û—à–∏–±–∫–∞: " + e.message, mainMenu());
    }
    return;
  }

  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ (–Ω–æ–≤—ã–π)
  if (ctx.session.waitingSchedule) {
    ctx.session.waitingSchedule = false;
    const text = ctx.message.text.trim();
    const sheetName = ctx.session.currentSheet;
    try {
      await parseAndAppend(SPREADSHEET_ID, sheetName, text, ctx.from.id.toString());
      await ctx.reply("‚úÖ –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!", mainMenu());
    } catch (e) {
      console.error(e);
      await ctx.reply(e.message, mainMenu());
    }
    return;
  }
});

// ==================== –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤ ====================
async function sendReport(ctx, period) {
  const userId = ctx.from.id.toString();

  if (!users[userId] || users[userId].status !== "approved") {
    return await ctx.reply("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é /start", mainMenu());
  }

  const fullName = users[userId].name.trim().toLowerCase();

  try {
    const client = await auth.getClient();
    const sheets = google.sheets({ version: "v4", auth: client });

    const sheetNames = ["–°—É—Ä–≥—É—Ç 1 (30 –ª–µ—Ç –ø–æ–±–µ–¥—ã)", "–°—É—Ä–≥—É—Ç 2 (–£—Å–æ–ª—å—Ü–µ–≤–∞)", "–°—É—Ä–≥—É—Ç 3 (–ú–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω–∞—è)"];

    let allRows = [];

    for (const sheetName of sheetNames) {
      const res = await sheets.spreadsheets.values.get({
        spreadsheetId: process.env.SHEET_ID,
        range: `${sheetName}!A2:Z`,
      });

      if (res.data.values) {
        allRows.push(...res.data.values);
      }
    }

    const rows = allRows;
    if (period === "today" || period === "yesterday") {
      const today = new Date();
      const target = new Date(today);
      if (period === "yesterday") target.setDate(today.getDate() - 1);
      const targetStr = target.toLocaleDateString("ru-RU");

      const match = rows.find((r) => {
        const rowName = r[2]?.trim().toLowerCase();
        const rowDateStr = r[1];
        const rowDate = parseDate(rowDateStr);
        return rowName === fullName && rowDate?.toLocaleDateString("ru-RU") === targetStr;
      });

      if (!match) {
        return await ctx.reply(`–î–∞–Ω–Ω—ã—Ö –∑–∞ ${period === "today" ? "—Å–µ–≥–æ–¥–Ω—è" : "–≤—á–µ—Ä–∞"} –Ω–µ—Ç.`, mainMenu());
      }

      const [, date, , , , , , hours, km, orders, , , , times, nps, , , , , , , zaezd1, zaezd2, salary] = match;
      const totalZaezd = parseFloat(zaezd1 || 0) + parseFloat(zaezd2 || 0);
      return await ctx.reply(
        `üìÖ ${date}\nüë§ ${users[userId].name}\n\n` +
          `–û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ: ${hours}\n` +
          `–ü—Ä–æ–±–µ–≥: ${km} –∫–º\n` +
          `–ó–∞–∫–∞–∑—ã: ${orders}\n` +
          `–ó–∞–µ–∑–¥—ã: ${totalZaezd}\n` +
          `–°—É–º–º–∞: ${salary} ‚ÇΩ`,
        mainMenu()
      );
    }

    if (period === "last_week") {
      const { fromDate, toDate } = getPreviousWeekRange();

      const filtered = rows.filter((r) => {
        const rowName = r[2]?.trim().toLowerCase();
        const rowDateStr = r[1];
        const rowDate = parseDate(rowDateStr);
        return rowName === fullName && rowDate && rowDate >= fromDate && rowDate <= toDate;
      });

      if (filtered.length === 0) {
        return await ctx.reply(
          `–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø—Ä–æ—à–ª—É—é –Ω–µ–¥–µ–ª—é ` + `(${fromDate.toLocaleDateString("ru-RU")} - ${toDate.toLocaleDateString("ru-RU")})`,
          mainMenu()
        );
      }

      let totalHours = 0,
        totalKm = 0,
        totalOrders = 0,
        totalSalary = 0,
        totalZaezdy = 0;
      let times = "",
        rating = "";
      let message =
        `üìÖ –¢–∞–±–µ–ª—å –∑–∞ –ø—Ä–æ—à–ª—É—é –Ω–µ–¥–µ–ª—é ` +
        `(${fromDate.toLocaleDateString("ru-RU")} - ${toDate.toLocaleDateString("ru-RU")})\n` +
        `üë§ ${users[userId].name}`;

      for (const r of filtered) {
        const [, date, , , , , , hours, km, orders, , , , time, nps, , , , , , , zaezd1, zaezd2, salary] = r;
        const totalZaezd = parseFloat(zaezd1 || 0) + parseFloat(zaezd2 || 0);
        message +=
          `\n\nüìÜ ${date}:\n` +
          `–û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ: ${hours} —á\n` +
          `–ü—Ä–æ–±–µ–≥: ${km} –∫–º\n` +
          `–ó–∞–∫–∞–∑—ã: ${orders}\n` +
          `–ó–∞–µ–∑–¥—ã: ${totalZaezd}\n` +
          `–°—É–º–º–∞: ${salary} ‚ÇΩ`;

        totalHours += parseFloat(hours || 0);
        totalKm += parseFloat(km || 0);
        totalOrders += parseInt(orders || 0);
        totalSalary += parseFloat(salary || 0);
        totalZaezdy += totalZaezd;
        times = time;
        rating = nps;
      }

      message +=
        `\n\n–ò–¢–û–ì–û:\n` +
        `–û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ: ${totalHours} —á\n` +
        `–ü—Ä–æ–±–µ–≥: ${totalKm} –∫–º\n` +
        `–ó–∞–∫–∞–∑–æ–≤: ${totalOrders}\n` +
        `–ó–∞–µ–∑–¥—ã: ${totalZaezdy}\n` +
        `–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${totalSalary.toFixed(2)} ‚ÇΩ\n` +
        `–†–µ–π—Ç–∏–Ω–≥: ${rating}\n` +
        `–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: ${times} –º–∏–Ω`;

      return await ctx.reply(message, mainMenu());
    }

    if (period === "current_week") {
      const { fromDate, toDate } = getCurrentWeekRange();

      const filtered = rows.filter((r) => {
        const rowName = r[2]?.trim().toLowerCase();
        const rowDate = parseDate(r[1]);
        return rowName === fullName && rowDate && rowDate >= fromDate && rowDate <= toDate;
      });

      if (filtered.length === 0) {
        return await ctx.reply(
          `–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é ` + `(${fromDate.toLocaleDateString("ru-RU")} - ${toDate.toLocaleDateString("ru-RU")})`,
          mainMenu()
        );
      }

      // –∞–∫–∫—É–º—É–ª–∏—Ä—É–µ–º –∏—Ç–æ–≥–∏
      let totalHours = 0,
        totalKm = 0,
        totalOrders = 0,
        totalSalary = 0,
        totalZaezdy = 0;
      let lastTime = "",
        lastRating = "";
      let message =
        `üìÖ –¢–∞–±–µ–ª—å –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é ` +
        `(${fromDate.toLocaleDateString("ru-RU")} - ${toDate.toLocaleDateString("ru-RU")})\n` +
        `üë§ ${users[userId].name}`;

      for (const r of filtered) {
        const [, date, , , , , , hours, km, orders, , , , time, nps, , , , , , , zaezd1, zaezd2, salary] = r;
        const zaezdy = parseFloat(zaezd1 || 0) + parseFloat(zaezd2 || 0);

        message +=
          `\n\nüìÜ ${date}:\n` +
          `–û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ: ${hours} —á\n` +
          `–ü—Ä–æ–±–µ–≥: ${km} –∫–º\n` +
          `–ó–∞–∫–∞–∑—ã: ${orders}\n` +
          `–ó–∞–µ–∑–¥—ã: ${zaezdy}\n` +
          `–°—É–º–º–∞: ${salary} ‚ÇΩ`;

        totalHours += parseFloat(hours || 0);
        totalKm += parseFloat(km || 0);
        totalOrders += parseInt(orders || 0, 10);
        totalSalary += parseFloat(salary || 0);
        totalZaezdy += zaezdy;
        lastTime = time;
        lastRating = nps;
      }

      message +=
        `\n\n–ò–¢–û–ì–û:\n` +
        `–û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ: ${totalHours} —á\n` +
        `–ü—Ä–æ–±–µ–≥: ${totalKm} –∫–º\n` +
        `–ó–∞–∫–∞–∑–æ–≤: ${totalOrders}\n` +
        `–ó–∞–µ–∑–¥—ã: ${totalZaezdy}\n` +
        `–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${totalSalary.toFixed(2)} ‚ÇΩ\n` +
        `–†–µ–π—Ç–∏–Ω–≥: ${lastRating}\n` +
        `–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: ${lastTime} –º–∏–Ω`;

      return await ctx.reply(message, mainMenu());
    }
  } catch (err) {
    return await ctx.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", mainMenu());
  }
}

// ==================== –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ ====================
bot.catch(async (err, ctx) => {
  const userId = ctx.from?.id || "unknown";
  await ctx.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", mainMenu());
});

// ==================== –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ====================
bot
  .launch()
  .then(() => {
    console.log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!");
  })
  .catch((err) => {
    process.exit(1);
  });

// ==================== –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã ====================
process.once("SIGINT", () => {
  bot.stop("SIGINT");
  process.exit();
});

process.once("SIGTERM", () => {
  bot.stop("SIGTERM");
  process.exit();
});
